<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docker安装opwnert</title>
      <link href="/2025/01/16/opwnert/"/>
      <url>/2025/01/16/opwnert/</url>
      
        <content type="html"><![CDATA[<ul><li>运行 <code>ip add</code> 命令查看网卡信息，例如 网络接口逻辑名称是 eth0</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">4: eth0: &lt;BROADCAST,MULTICAST,PROMISC,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class="line">    link/ether 32:7d:f1:57:9b:c8 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    altname end0</span><br><span class="line">    inet 192.168.1.10/24 brd 192.168.1.255 scope global noprefixroute eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::23b9:deda:2f5f:8be2/64 scope link noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><blockquote><p>开启此网卡混杂模式。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip link set eth0 promisc on</span><br></pre></td></tr></table></figure><ul><li>配置MACVLAN</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker network create -d macvlan \</span><br><span class="line">  --subnet=192.168.1.0/24 \</span><br><span class="line">  --gateway=192.168.1.1 \</span><br><span class="line">  -o parent=eth0 \</span><br><span class="line">  wrt</span><br></pre></td></tr></table></figure><blockquote><p>注: 192.168.1.0&#x2F;24 和 192.168.1.1 自行调整,为你局域网的网段</p></blockquote><ul><li>拉取镜像并初始化</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">   -d \</span><br><span class="line">   --name=&quot;openwrt&quot; \</span><br><span class="line">   --network=wrt \</span><br><span class="line">   --privileged=true \</span><br><span class="line">   --restart=always  \</span><br><span class="line">   --ulimit nofile=16384:65536 \</span><br><span class="line">   -v /lib/modules/$(uname -r):/lib/modules/$(uname -r) \</span><br><span class="line">   summary/openwrt-aarch64:latest</span><br></pre></td></tr></table></figure><ul><li>更改固件默认 IP 地址</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec openwrt sed -e &#x27;s/192.168.1.1/192.168.1.99/&#x27; -i /etc/config/network</span><br></pre></td></tr></table></figure><blockquote><p>重启</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart openwrt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> opwnert </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用bitwarden_rs搭建自己的密码管理器</title>
      <link href="/2023/08/30/bitwardenrs/"/>
      <url>/2023/08/30/bitwardenrs/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>BitwardenRS是一个开源的密码管理器，它可以让你在自己的服务器上搭建和运行自己的Bitwarden密码管理服务。它提供了强大的加密功能，可以安全地存储和管理各种登录凭据。使用BitwardenRS，你可以方便地访问和使用密码，并保护你的个人信息的安全。</p><blockquote><p>本文将引导读者通过在<a href="https://cloud.tencent.com/product/lighthouse">腾讯云Lighthouse服务器</a>用<code>docker compose</code>部署BitwardenRS。</p></blockquote><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><blockquote><p>安装docker</p></blockquote><ul><li>一键安装脚本！Linux系统都支持！</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官方源</span></span><br><span class="line">curl -sSL https://get.docker.com/ | sh</span><br><span class="line"><span class="comment">#  Azure源(中国区azure)</span></span><br><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror AzureChinaCloud</span><br></pre></td></tr></table></figure><ul><li>启动服务<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动Docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="comment">#开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote><p>本次使用的是<a href="https://github.com/dani-garcia/vaultwarden">vaultwarden</a>镜像。<br><code>vaultwarden</code>优点：资源占用少，减少服务器负担。</p></blockquote><h4 id="1-创建目录"><a href="#1-创建目录" class="headerlink" title="1.创建目录"></a>1.创建目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/bitwardenrs</span><br></pre></td></tr></table></figure><h4 id="2-创建配置文件"><a href="#2-创建配置文件" class="headerlink" title="2.创建配置文件"></a>2.创建配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#apth: ~/bitwardenrs/docker-compose.yml</span></span><br><span class="line"><span class="built_in">cat</span> &gt; ~/bitwarden/docker-compose.yml&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">version: &#x27;3&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">services:</span></span><br><span class="line"><span class="string">  vaultwarden:</span></span><br><span class="line"><span class="string">    image: vaultwarden/server:latest</span></span><br><span class="line"><span class="string">    container_name: vaultwarden</span></span><br><span class="line"><span class="string">    restart: always</span></span><br><span class="line"><span class="string">    # environment:   # 以下为可选配置，以qq邮箱为例</span></span><br><span class="line"><span class="string">    #   - SMTP_HOST=smtp.qq.com # 邮箱服务器地址</span></span><br><span class="line"><span class="string">    #   - SMTP_FROM=xxxx@qq.com #  发件人</span></span><br><span class="line"><span class="string">    #   - SMTP_PORT=587         # 邮箱服务器端口</span></span><br><span class="line"><span class="string">    #   - SMTP_SECURITY=starttls   # 邮箱服务器安全协议</span></span><br><span class="line"><span class="string">    #   - SMTP_USERNAME=xxxxx@qq.com    #邮箱账号</span></span><br><span class="line"><span class="string">    #   - SMTP_PASSWORD=xxxxx         #邮箱密码</span></span><br><span class="line"><span class="string">    #   - DOMAIN=https://xx.xxx.xxx    #域名</span></span><br><span class="line"><span class="string">    ports:</span></span><br><span class="line"><span class="string">    - &quot;3013:80&quot;</span></span><br><span class="line"><span class="string">    volumes:</span></span><br><span class="line"><span class="string">      - ./data:/data</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><blockquote><p>以上配置文件为最简配置，如果需要配置邮箱，可以取消注释并修改相应配置。</p></blockquote><blockquote><p>配置好邮箱后，登录时会有邮件通知。</p></blockquote><blockquote><p>qq邮箱密码需要使用授权码，路径: 登录<a href="https://mail.qq.com/">mail.qq.com</a>后 <code>设置</code>—&gt;<code>账号</code>—&gt;<code>POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV服务</code>具体参考下图：</p></blockquote><p><img src="https://img1.131213.xyz/file/bbd8464a8ff29d57fb89b.png" alt="bbd8464a8ff29d57fb89b.png"></p><blockquote><p>以上配置文件为最简配置，如果需要增加配置，可以参考<a href="https://github.com/dani-garcia/vaultwarden/wiki">官方文档</a>。</p></blockquote><h4 id="3-启动服务"><a href="#3-启动服务" class="headerlink" title="3.启动服务"></a>3.启动服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#path: ~/bitwardenrs</span></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p><img src="https://img1.131213.xyz/file/617558af5e93a79f2ef02.png" alt="617558af5e93a79f2ef02.png"></p><h4 id="4-配置nginx反代"><a href="#4-配置nginx反代" class="headerlink" title="4.配置nginx反代"></a>4.配置nginx反代</h4><blockquote><p>nginx安装可以参考<a href="https://nginx.org/en/linux_packages.html">官方文档</a>，或我的<a href="https://www.tryxd.cn/2023/08/29/openresty/">OpenResty安装教程</a>。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">#path: /etc/nginx/conf.d/bitwarden.conf</span><br><span class="line">upstream vaultwarden-default &#123;</span><br><span class="line">  zone vaultwarden-default 64k;</span><br><span class="line">  server 127.0.0.1:3013;</span><br><span class="line">  keepalive 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Needed to support websocket connections</span><br><span class="line"># See: https://nginx.org/en/docs/http/websocket.html</span><br><span class="line"># Instead of &quot;close&quot; as stated in the above link we send an empty value.</span><br><span class="line"># Else all keepalive connections will not work.</span><br><span class="line">map $http_upgrade $connection_upgrade &#123;</span><br><span class="line">    default upgrade;</span><br><span class="line">    &#x27;&#x27;      &quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Redirect HTTP to HTTPS</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    listen [::]:80;</span><br><span class="line">    server_name cloud.tencent.com;  # 修改为你的域名</span><br><span class="line"></span><br><span class="line">    if ($host = cloud.tencent.com) &#123;   # 修改为你的域名</span><br><span class="line">        return 301 https://$host$request_uri;</span><br><span class="line">    &#125;</span><br><span class="line">    return 404;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl ;</span><br><span class="line">    listen [::]:443 ssl;</span><br><span class="line">    server_name cloud.tencent.com;   # 修改为你的域名</span><br><span class="line"></span><br><span class="line">    # Specify SSL Config when needed</span><br><span class="line">    ssl_certificate /etc/nginx/conf.d/ssl/cloud.tencent.com_bundle.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/conf.d/ssl/cloud.tencent.com.key;</span><br><span class="line">    access_log /var/log/nginx/bitwarden.log main;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    client_max_body_size 525M;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">      proxy_http_version 1.1;</span><br><span class="line">      proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">      proxy_set_header Connection $connection_upgrade;</span><br><span class="line"></span><br><span class="line">      proxy_set_header Host $host;</span><br><span class="line">      proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">      proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line"></span><br><span class="line">      proxy_pass http://vaultwarden-default;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ssl证书申请可以参考：<a href="https://cloud.tencent.com/document/product/400/6814">腾讯云免费证书申请</a>。</p></blockquote><blockquote><p>把<code>cloud.tencent.com</code>替换为你的域名。</p></blockquote><blockquote><p>把申请到的nginx证书放到<code>/etc/nginx/conf.d/ssl/</code>目录下。并修改配置文件中的证书路径。</p></blockquote><ul><li>cloud.tencent.com_bundle.crt 证书文件</li><li>cloud.tencent.com.key 私钥文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    ssl_certificate /etc/nginx/conf.d/ssl/cloud.tencent.com_bundle.crt;  # 修改为你的证书文件名</span><br><span class="line">    ssl_certificate_key /etc/nginx/conf.d/ssl/cloud.tencent.com.key;     # 修改为你的私钥文件名</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>执行<code>nginx -s reload</code>使配置生效。</p></blockquote><h4 id="5-访问"><a href="#5-访问" class="headerlink" title="5.访问"></a>5.访问</h4><blockquote><p>访问你设置的域名，即可看到BitwardenRS的登录界面。</p></blockquote><p><img src="https://img1.131213.xyz/file/3a5e425522498086c420f.png" alt="3a5e425522498086c420f.png"></p><blockquote><p>注册账号，登录即可使用。</p></blockquote><h4 id="6-配置2FA"><a href="#6-配置2FA" class="headerlink" title="6.配置2FA"></a>6.配置2FA</h4><blockquote><p>2FA是一种双重验证机制，可以增加账号的安全性。</p></blockquote><blockquote><p>在<code>设置</code>—&gt;<code>安全</code>—&gt;<code>双重验证</code>中，可以设置2FA。</p></blockquote><p><img src="https://img1.131213.xyz/file/75373e4f04699ea89db9e.png" alt="75373e4f04699ea89db9e.png"></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><blockquote><p>具体支持的客户端可参考：<a href="https://bitwarden.com/download/">官方文档</a></p></blockquote><blockquote><p>本文以<code>Microsoft Edge</code>浏览器为例。插件地址：<a href="https://microsoftedge.microsoft.com/addons/detail/jbkfoedolllekgbhcbcoahefnbanhhlh">Microsoft Edge bitwarden</a></p></blockquote><blockquote><p>安装插件后，点击插件图标，修改为自托管。</p></blockquote><p><img src="https://img1.131213.xyz/file/322cea993131b51f1ed01.png" alt="322cea993131b51f1ed01.png"></p><blockquote><p>服务器URL填写你的域名，点击保存即可登录使用。</p></blockquote><p><img src="https://img1.131213.xyz/file/0a7652d8d19a2828a8f43.png" alt="0a7652d8d19a2828a8f43.png"></p><blockquote><p>可根据你的需求设置自动锁定时间、自动填充等。</p></blockquote><p><img src="https://img1.131213.xyz/file/428e4039a590c82518dcc.png" alt="428e4039a590c82518dcc.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> bitwarden </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用 openresty 打造 IP 地址查询接口</title>
      <link href="/2023/08/29/openresty/"/>
      <url>/2023/08/29/openresty/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><a href="https://openresty.org/">OpenResty</a> 是基于 Nginx 的高性能 Web 应用服务器，它集成了 Lua 编程语言，使开发人员能够快速构建灵活、可扩展的 Web 应用程序。借助 OpenResty，您可以利用 Nginx 强大的性能特点和 Lua 的编程能力来处理复杂的业务逻辑，并实现高并发和高效率的请求处理。同时，OpenResty 还提供了丰富的 Lua 库和模块，简化开发过程，如处理 HTTP 请求、操作数据库等。总之，OpenResty 是一个强大而简洁的工具，适用于构建高性能的 Web 应用程序。</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>本文章使用的是<a href="https://curl.qcloud.com/SP2HPTve">腾讯云CVM</a>服务器。系统为Debian 12 。OpenResty版本为 1.21.4.2 </p><p><img src="https://img1.131213.xyz/file/ae86644535c7a1e85f43b.png" alt="ae86644535c7a1e85f43b.png"></p><hr><h3 id="安装OPENRESTY"><a href="#安装OPENRESTY" class="headerlink" title="安装OPENRESTY"></a>安装OPENRESTY</h3><blockquote><p>本次是基于源码编译安装，也可以使用<a href="https://openresty.org/en/linux-packages.html">包管理器安装</a></p></blockquote><p>编译环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@VM-0-3-debian:~<span class="comment"># lsb_release -a</span></span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID: Debian</span><br><span class="line">Description:    Debian GNU/Linux 12 (bookworm)</span><br><span class="line">Release:        12</span><br><span class="line">Codename:       bookworm</span><br></pre></td></tr></table></figure><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install -y libgeoip-dev libpcre3 libpcre3-dev  openssl libssl-dev  libmaxminddb0 libmaxminddb-dev mmdb-bin libgeoip1 libgeoip-dev geoip-bin  build-essential  gcc libtool autoconf zlib1g zlib1g-dev git</span><br></pre></td></tr></table></figure><h4 id="安装libmaxminddb"><a href="#安装libmaxminddb" class="headerlink" title="安装libmaxminddb"></a>安装libmaxminddb</h4><blockquote><p><a href="https://github.com/maxmind/libmaxminddb">libmaxminddb</a> 是一个 C 语言库，用于解析 MaxMind DB 格式的 IP 地理位置数据库。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#path ~/openresty</span></span><br><span class="line">wget https://github.com/maxmind/libmaxminddb/releases/download/1.7.1/libmaxminddb-1.7.1.tar.gz</span><br><span class="line">tar -xzvf libmaxminddb-1.7.1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> libmaxminddb-1.7.1</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make check</span><br><span class="line">sudo make install</span><br><span class="line">sudo sh -c <span class="string">&quot;echo /usr/local/lib  &gt;&gt; /etc/ld.so.conf.d/local.conf&quot;</span></span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure><h4 id="准备openssl、pcre和zlib"><a href="#准备openssl、pcre和zlib" class="headerlink" title="准备openssl、pcre和zlib"></a>准备openssl、pcre和zlib</h4><blockquote><p>查询openssl版本</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@VM-0-3-debian:~<span class="comment"># openssl version</span></span><br><span class="line">OpenSSL 3.0.9 30 May 2023 (Library: OpenSSL 3.0.9 30 May 2023)</span><br></pre></td></tr></table></figure><blockquote><p>我们手动下载对应版本的openssl、pcre和zlib，注意这三个库只需要下载解压，并不需要提前进行安装。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#path ~/openresty</span></span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://www.openssl.org/source/openssl-3.0.9.tar.gz</span><br><span class="line">wget http://ftp.cs.stanford.edu/pub/exim/pcre/pcre-8.45.tar.gz</span><br><span class="line">wget http://www.zlib.net/zlib-1.3.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf openssl-3.0.9.tar.gz</span><br><span class="line">tar -zxvf pcre-8.45.tar.gz</span><br><span class="line">tar -zxvf zlib-1.3.tar.gz</span><br></pre></td></tr></table></figure><h4 id="下载ngx-http-geoip2-module"><a href="#下载ngx-http-geoip2-module" class="headerlink" title="下载ngx_http_geoip2_module"></a>下载ngx_http_geoip2_module</h4><blockquote><p><a href="https://github.com/leev/ngx_http_geoip2_module.git">ngx_http_geoip2_module</a> 是一个用于 Nginx 的第三方模块，它提供了对 MaxMind GeoIP2 数据库的支持。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#path ~/openresty</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/leev/ngx_http_geoip2_module.git</span><br></pre></td></tr></table></figure><h4 id="创建用户-amp-amp-组-amp-amp-目录"><a href="#创建用户-amp-amp-组-amp-amp-目录" class="headerlink" title="创建用户&amp;&amp;组&amp;&amp;目录"></a>创建用户&amp;&amp;组&amp;&amp;目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">groupadd nginx</span><br><span class="line">useradd -g nginx -s /sbin/nologin -M nginx</span><br><span class="line"><span class="built_in">mkdir</span> -p /var/cache/nginx</span><br></pre></td></tr></table></figure><h4 id="下载openresty"><a href="#下载openresty" class="headerlink" title="下载openresty"></a>下载openresty</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#path ~/openresty</span></span><br><span class="line">wget https://openresty.org/download/openresty-1.21.4.2.tar.gz</span><br><span class="line">tar -zxvf openresty-1.21.4.2.tar.gz</span><br></pre></td></tr></table></figure><h4 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h4><blockquote><p>我们可以自定义编译安装的模块，这里可以查看openresty模块的<a href="https://openresty.org/en/components.html">官方说明</a>或使用<code>./configure --help</code>。</p></blockquote><p><img src="https://img1.131213.xyz/file/cd388188a6943230a92df.png" alt="cd388188a6943230a92df.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置和准备 软件包</span></span><br><span class="line"><span class="comment">#path ~/openresty/openresty-1.21.4.2</span></span><br><span class="line">./configure \</span><br><span class="line">--prefix=/etc/nginx \</span><br><span class="line">--sbin-path=/usr/sbin/nginx \</span><br><span class="line">--modules-path=/usr/lib/nginx/modules \</span><br><span class="line">--conf-path=/etc/nginx/nginx.conf \</span><br><span class="line">--error-log-path=/var/log/nginx/error.log \</span><br><span class="line">--http-log-path=/var/log/nginx/access.log \</span><br><span class="line">--pid-path=/var/run/nginx.pid \</span><br><span class="line">--lock-path=/var/run/nginx.lock \</span><br><span class="line">--http-client-body-temp-path=/var/cache/nginx/client_temp \</span><br><span class="line">--http-proxy-temp-path=/var/cache/nginx/proxy_temp \</span><br><span class="line">--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \</span><br><span class="line">--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \</span><br><span class="line">--http-scgi-temp-path=/var/cache/nginx/scgi_temp \</span><br><span class="line">--user=nginx \</span><br><span class="line">--group=nginx \</span><br><span class="line">--with-compat \</span><br><span class="line">--with-file-aio \</span><br><span class="line">--with-threads \</span><br><span class="line">--with-http_addition_module \</span><br><span class="line">--with-http_auth_request_module \</span><br><span class="line">--with-http_dav_module \</span><br><span class="line">--with-http_flv_module \</span><br><span class="line">--with-http_gunzip_module \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--with-http_mp4_module \</span><br><span class="line">--with-http_random_index_module \</span><br><span class="line">--with-http_realip_module \</span><br><span class="line">--with-http_secure_link_module \</span><br><span class="line">--with-http_slice_module \</span><br><span class="line">--with-http_ssl_module \</span><br><span class="line">--with-http_stub_status_module \</span><br><span class="line">--with-http_sub_module \</span><br><span class="line">--with-http_v2_module \</span><br><span class="line">--with-mail \</span><br><span class="line">--with-mail_ssl_module \</span><br><span class="line">--with-stream \</span><br><span class="line">--with-stream_realip_module \</span><br><span class="line">--with-stream_ssl_module \</span><br><span class="line">--with-stream_ssl_preread_module \</span><br><span class="line">--with-luajit \</span><br><span class="line">--with-pcre-jit \</span><br><span class="line">--with-http_geoip_module \</span><br><span class="line">--with-http_dav_module \</span><br><span class="line">--add-module=/root/openresty/ngx_http_geoip2_module  \</span><br><span class="line">--with-openssl=/root/openresty/openssl-3.0.9 \</span><br><span class="line">--with-zlib=/root/openresty/zlib-1.3 \</span><br><span class="line">--with-pcre=/root/openresty/pcre-8.45</span><br></pre></td></tr></table></figure><p><img src="https://img1.131213.xyz/file/e03e430748c11643d6f7c.png" alt="e03e430748c11643d6f7c.png"><br><img src="https://img1.131213.xyz/file/9b1b40cf138701529af57.png" alt="9b1b40cf138701529af57.png"></p><blockquote><p> 运行<code>gmake</code> 命令来编译软件包，最后使用 <code>gmake install</code> 命令来安装它</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gmake</span><br><span class="line">gmake install</span><br></pre></td></tr></table></figure><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><blockquote><p>在<code>~/.bashrc</code>文件中添加环境变量，然后执行<code>source ~/.bashrc</code>使其生效。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#path ~/.bashrc</span></span><br><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/etc/nginx/bin</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p><img src="https://img1.131213.xyz/file/5319b62b1c172b72c1a7d.png" alt="5319b62b1c172b72c1a7d.png"></p><h4 id="配置systemctl管理openresty"><a href="#配置systemctl管理openresty" class="headerlink" title="配置systemctl管理openresty"></a>配置systemctl管理openresty</h4><blockquote><p>在<code>/etc/systemd/system/nginx.service</code>目录下创建<code>nginx.service</code>文件。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#path /etc/systemd/system/nginx.service</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/systemd/system/nginx.service &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=Nginx(OpenResty ) - high performance web server</span></span><br><span class="line"><span class="string">After=network-online.target remote-fs.target nss-lookup.target</span></span><br><span class="line"><span class="string">Wants=network-online.target</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">Type=forking</span></span><br><span class="line"><span class="string">PIDFile=/var/run/nginx.pid</span></span><br><span class="line"><span class="string">ExecStartPre=/usr/sbin/nginx -t -c /etc/nginx/nginx.conf</span></span><br><span class="line"><span class="string">ExecStart=/usr/sbin/nginx -c /etc/nginx/nginx.conf</span></span><br><span class="line"><span class="string">ExecReload=/bin/sh -c &quot;/bin/kill -s HUP &quot;</span></span><br><span class="line"><span class="string">ExecStop=/bin/sh -c &quot;/bin/kill -s TERM &quot;</span></span><br><span class="line"><span class="string">LimitNOFILE=65535</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><blockquote><p>然后执行<code>systemctl daemon-reload</code>使其生效。<br>执行<code>systemctl enable nginx</code>使其开机自启。<br>执行<code>systemctl start nginx</code>启动openresty。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一些常用命令</span></span><br><span class="line">systemctl status nginx   <span class="comment">#查看openresty状态。</span></span><br><span class="line">systemctl stop nginx     <span class="comment">#停止openresty。</span></span><br><span class="line">systemctl restart nginx  <span class="comment">#重启openresty。</span></span><br></pre></td></tr></table></figure><hr><p>打开浏览器访问<code>http://ip:80</code>，如果出现下面页面则说明安装成功。</p><p><img src="https://img1.131213.xyz/file/93714a020f443cd27bd5d.png" alt="93714a020f443cd27bd5d.png"></p><h4 id="OpenResty操作命令"><a href="#OpenResty操作命令" class="headerlink" title="OpenResty操作命令"></a>OpenResty操作命令</h4><blockquote><p>openresty的操作指令和nginx是完全一致的。具体如下：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">root@VM-0-15-debian:~<span class="comment"># nginx -h</span></span><br><span class="line">nginx version: openresty/1.21.4.2</span><br><span class="line">Usage: nginx [-?hvVtTq] [-s signal] [-p prefix]</span><br><span class="line">             [-e filename] [-c filename] [-g directives]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -?,-h         : this <span class="built_in">help</span></span><br><span class="line">  -v            : show version and <span class="built_in">exit</span></span><br><span class="line">  -V            : show version and configure options <span class="keyword">then</span> <span class="built_in">exit</span></span><br><span class="line">  -t            : <span class="built_in">test</span> configuration and <span class="built_in">exit</span></span><br><span class="line">  -T            : <span class="built_in">test</span> configuration, dump it and <span class="built_in">exit</span></span><br><span class="line">  -q            : suppress non-error messages during configuration testing</span><br><span class="line">  -s signal     : send signal to a master process: stop, quit, reopen, reload</span><br><span class="line">  -p prefix     : <span class="built_in">set</span> prefix path (default: /etc/nginx/nginx/)</span><br><span class="line">  -e filename   : <span class="built_in">set</span> error <span class="built_in">log</span> file (default: /var/log/nginx/error.log)</span><br><span class="line">  -c filename   : <span class="built_in">set</span> configuration file (default: /etc/nginx/nginx.conf)</span><br><span class="line">  -g directives : <span class="built_in">set</span> global directives out of configuration file</span><br></pre></td></tr></table></figure><hr><h3 id="配置openresty"><a href="#配置openresty" class="headerlink" title="配置openresty"></a>配置openresty</h3><blockquote><p><code>IP数据库</code>：<a href="https://dev.maxmind.com/geoip/geoip2/geolite2/">GeoLite2-City</a>，下载后放在<code>/etc/nginx/goeip2/</code>目录下。</p></blockquote><blockquote><p>配置文件路径<code>/etc/nginx/nginx.conf</code>，下面是我配置的文件，可以根据自己的需求进行修改。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line">#path /etc/nginx/nginx.conf</span><br><span class="line"># 指定启动nginx使用的用户（不指定为nobody）</span><br><span class="line">user  nginx;</span><br><span class="line"></span><br><span class="line"># 定义作为web服务器/反向代理服务器时的 worder process 进程数</span><br><span class="line">worker_processes    auto;</span><br><span class="line"># 开启多核支持，且自动根据CPU个数均匀分配 worder process 进程数</span><br><span class="line">worker_cpu_affinity auto;</span><br><span class="line"># 指定一个nginx进程可以打开的最多文件描述符数目</span><br><span class="line">worker_rlimit_nofile    65535;</span><br><span class="line"># error_log配置，等级类型：[ debug | info | notice | warn | error | crit ]</span><br><span class="line">error_log  /var/log/nginx/error.log  notice;</span><br><span class="line"># nginx的进程pid位置；</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 连接处理相关设置</span><br><span class="line">events &#123;</span><br><span class="line">    # 使用epoll的 I/O 模型，必开项，极其有利于性能</span><br><span class="line">    use            epoll;</span><br><span class="line">    # 设置是否允许一个worker可以接受多个请求，默认是off；</span><br><span class="line">    # 值为OFF时，一个worker process进程一次只接收一个请求，由master进程自动分配worker（nginx精于此道，故建议设置为off）；</span><br><span class="line">    # 值为ON则一次可接收所有请求，可避免master进程额外调度，但是在高瞬时值的情况下可能导致tcp flood；</span><br><span class="line">    multi_accept off;</span><br><span class="line">    # 每个工作进程的并发连接数（默认为1024）</span><br><span class="line">    # 理论上nginx最大连接数 = worker_processes * worker_connections</span><br><span class="line">    worker_connections 65535;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    ################################ngx_lua_waf web应用防火墙################################</span><br><span class="line"></span><br><span class="line">    # ##WAF 配置资源引用开始</span><br><span class="line">    # lua_package_path &quot;/etc/nginx/site/lualib/?.lua;;&quot;;</span><br><span class="line">    # lua_shared_dict limit 20m;</span><br><span class="line">    # # init_by_lua_file  /etc/nginx/luaconf/init.lua; </span><br><span class="line">    # # access_by_lua_file /etc/nginx/luaconf/waf.lua;</span><br><span class="line">    # lua_code_cache on;</span><br><span class="line"></span><br><span class="line">    # # Set Prometheus global dict</span><br><span class="line">    # lua_shared_dict prometheus_metrics 10M; #init 10M memory</span><br><span class="line">    # lua_shared_dict uri_by_host 10M;</span><br><span class="line">    # lua_shared_dict global_set 1M;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ################################ngx_lua_waf web应用防火墙################################</span><br><span class="line">    </span><br><span class="line">    charset utf-8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # mime.types 指定了nginx可以接受的 Content-Type，该文件默认位于nginx.conf的同级目录</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    # 设置默认文件类型，application/octet-stream 表示未知的应用程序文件，浏览器一般不会自动执行或询问执行</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">################################获取访问用户真实IP（而不是CDN节点IP）################################</span><br><span class="line">    set_real_ip_from 0.0.0.0/0;</span><br><span class="line">    real_ip_header X-Forwarded-For;</span><br><span class="line">    real_ip_recursive on;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">################################IP数据库################################</span><br><span class="line"></span><br><span class="line">    geoip2 /etc/nginx/goeip2/GeoLite2-City.mmdb &#123;</span><br><span class="line">        auto_reload 5m;</span><br><span class="line">        $geoip2_data_country_code country iso_code;</span><br><span class="line">        $geoip2_data_country_name country names zh-CN;</span><br><span class="line">        $geoip2_data_province_name subdivisions 0 names zh-CN;</span><br><span class="line">        $geoip2_data_city_name city names zh-CN;</span><br><span class="line">        $geoip2_data_location_latitude location latitude;</span><br><span class="line">        $geoip2_data_location_longitude location longitude;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">################################设置日志的记录格式 ################################</span><br><span class="line">    log_format main  escape=none &#x27;$geoip2_data_country_name - $geoip2_data_city_name - &#x27;</span><br><span class="line">                      &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 不记录404错误的日志</span><br><span class="line">    log_not_found   off;</span><br><span class="line">    # 隐藏nginx版本号</span><br><span class="line">    server_tokens   off;</span><br><span class="line">    # 开启0拷贝，提高文件传输效率</span><br><span class="line">    sendfile    on;</span><br><span class="line">    # 配合 sendfile 使用，启用后数据包会累计到一定大小之后才会发送，减小额外开销，提高网络效率；</span><br><span class="line">    tcp_nopush  on;</span><br><span class="line">    # 启用后表示禁用 Nagle 算法，尽快发送数据</span><br><span class="line">    # 与 tcp_nopush 结合使用的效果是：先填满包，再尽快发送</span><br><span class="line">    # Nginx 只会针对处于 keep-alive 状态的 TCP 连接才会启用 tcp_nodelay</span><br><span class="line">    tcp_nodelay on;</span><br><span class="line">    # 指定客户端与服务端建立连接后发送 request body 的超时时间，超时Nginx将返回http 408</span><br><span class="line">    client_body_timeout 10;</span><br><span class="line">    # 开启从client到nginx的连接长连接支持，指定每个 TCP 连接最多可以保持多长时间</span><br><span class="line">    # keepalive_timeout的值应该比 client_body_timeout 大</span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line">    # keepalive_requests指令用于设置一个keep-alive连接上可以服务的请求的最大数量，当最大请求数量达到时，连接将被关闭</span><br><span class="line">    keepalive_requests  1000;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">################################客户端请求头部的缓冲区大小，设置等于系统分页大小即可，如果header过大可根据实际情况调整；################################</span><br><span class="line">    # 查看系统分页：getconf PAGESIZE</span><br><span class="line">    client_header_buffer_size       32k;</span><br><span class="line">    # 设置客户端请求的Header头缓冲区大小，如果客户端的Cookie信息较大，按需增加</span><br><span class="line">    large_client_header_buffers     4 64k;</span><br><span class="line">    # 优化读取\$request_body变量时的I/O性能</span><br><span class="line">    client_body_in_single_buffer    on;</span><br><span class="line">    # 设定request body的缓冲大小，仅在 Nginx被设置成使用内存缓冲时有效（使用文件缓冲时该参数无效）</span><br><span class="line">    client_body_buffer_size     128k;</span><br><span class="line">    # 开启proxy忽略客户端中断，避免499错误</span><br><span class="line">    proxy_ignore_client_abort       on;</span><br><span class="line">    # 默认的情况下nginx引用header变量时不能使用带下划线的变量，设置underscores_in_headers为 on取消该限制</span><br><span class="line">    underscores_in_headers      on;</span><br><span class="line">    # 默认的情况下nginx会忽略带下划线的变量，设置ignore_invalid_headers为off取消该限制</span><br><span class="line">    ignore_invalid_headers      off;</span><br><span class="line">    # 设置客户端向服务端发送一个完整的 request header 的超时时间，优化弱网场景下nginx的性能</span><br><span class="line">    client_header_timeout   10;</span><br><span class="line">    # 设置向客户端传输数据的超时时间</span><br><span class="line">    send_timeout        60;</span><br><span class="line">    # 用于启用文件功能时用限制文件大小；</span><br><span class="line">    client_max_body_size    50m;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">################################ 文件压缩配置，对文本文件效果较好，对图像类应用效果一般反而徒增服务器资源消耗################################</span><br><span class="line">    gzip        on;</span><br><span class="line">    # 兼容http 1.0</span><br><span class="line">    gzip_http_version   1.0;</span><br><span class="line">    # 压缩比，数值越大：压缩的程度越高、空间占用越低、压缩效率越低、资源消耗越大</span><br><span class="line">    gzip_comp_level 6;</span><br><span class="line">    # 设置压缩门限，小于该长度将不会进行压缩动作（数据过小的情况下，压缩效果不明显）</span><br><span class="line">    gzip_min_length 1k;</span><br><span class="line">    # 用于在nginx作为反向代理时，根据请求头中的“Via”字段决定是否启用压缩功能，默认值为off，any表示对所有请求启动压缩；</span><br><span class="line">    gzip_proxied    any;</span><br><span class="line">    # 用于在启动gzip压缩功能时，在http响应中添加Vary: Accept-Encoding头字段告知接收方使用了gzip压缩；</span><br><span class="line">    gzip_vary       on;</span><br><span class="line">    # 当Agent为IE6时禁用压缩：IE6对Gzip不友好，所以不压缩</span><br><span class="line">    gzip_disable    msie6;</span><br><span class="line">    # 设置系统用于存储gzip的压缩结果数据流的缓存大小（4 4k 代表以4k为单位，按照原始数据大小以4k为单位的4倍申请内存）</span><br><span class="line">    gzip_buffers    4 64k;</span><br><span class="line">    # 指定需要压缩的文件mime类型</span><br><span class="line">    gzip_types      text/xml text/plain text/css application/javascript application/x-javascript application/xml application/json application/rss+xml;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">################################ 作为反向代理服务器配置 ################################</span><br><span class="line"></span><br><span class="line">    # 当请求未携带“Host”请求头时将Host设置为虚拟主机的主域名</span><br><span class="line">    # proxy_set_header        Host \$host;</span><br><span class="line">    # 设置真实客户端IP</span><br><span class="line">    # proxy_set_header        X-Real-IP \$remote_addr;</span><br><span class="line">    # 简称XFF头，即HTTP的请求端真实的IP，在有前置cdn或者负载均衡可能会被修改；如果要提取客户端真实IP，需要根据实际情况调整，如若后端程序获得对X-Forwarded-For兼容性不好的话（没有考虑到X-Forwarded-For含有多个IP的情况），建议设置为：\$http_x_forwarded_for</span><br><span class="line">    # proxy_set_header        X-Forwarded-For \$proxy_add_x_forwarded_for;</span><br><span class="line">    </span><br><span class="line">    # 启用nginx和后端server（upstream）之间长连接支持（必设项，否则很影响nginx性能），HTTP协议中从1.1版本才支持长连接；启用时需要评估upstream的keepalive参数（默认是关闭的，比较懒的同学可以设置为500）</span><br><span class="line">    proxy_http_version 1.1;</span><br><span class="line">    # 为了兼容老的协议以及防止http头中有Connection close导致的keepalive失效，需要及时清掉HTTP头部的Connection；</span><br><span class="line">    # 该参数决定了访问完成后，后端server后如何处理本次连接，默认配置是主动close（会给后端server带来大量的TIME_WAIT连接，降低后端server性能），设置为&quot;&quot;结合proxy_http_version设置连接保持（长连接）；</span><br><span class="line">    proxy_set_header Connection &quot;&quot;;</span><br><span class="line">    # 用于对发送给客户端的URL进行修改，使用不到的话可以关闭</span><br><span class="line">    proxy_redirect          off;</span><br><span class="line">    # 设置缓冲区的大小和数量，用于放置被代理的后端服务器取得的响应内容</span><br><span class="line">    proxy_buffers           64 8k;</span><br><span class="line">    # 设置和后端建立连接的超时时间，单位秒</span><br><span class="line">    proxy_connect_timeout   60;</span><br><span class="line">    # 设置Nginx向后端被代理服务器发送read请求后，等待响应的超时时间，默认60秒</span><br><span class="line">    proxy_read_timeout 60;</span><br><span class="line">    # 设置Nginx向后端被代理服务器发送write请求后，等待响应的超时时间，默认60秒</span><br><span class="line">    proxy_send_timeout 60;</span><br><span class="line">    # 用于配置存放HTTP报文头的哈希表容量，默认为512个字符。一般都设置为1024，这个大小是哈希表的总大小，</span><br><span class="line">    #设定了这个参数Nginx不是一次全部申请出来，需要用的时候才会申请；</span><br><span class="line">    #但是当真正需要使用的时候也不是一次全部申请，而是会设置一个单次申请最大值（proxy_headers_hash_bucket_size）</span><br><span class="line">    proxy_headers_hash_max_size 1024;</span><br><span class="line">    # 用于设置Nginx服务器申请存放HTTP报文头的哈希表容量的单位大小，默认为64个字符。一般配置为128。</span><br><span class="line">    #这个大小是单次申请最多申请多大，也就是每次用需要申请，但是每次申请最大申请多少，整个哈希表大小不可超过上面设置的值。</span><br><span class="line">    proxy_headers_hash_bucket_size 128;</span><br><span class="line">    # 设置缓存临时目录</span><br><span class="line">    proxy_temp_path /var/cache/nginx/proxy_temp;</span><br><span class="line">    # 设置缓存目录、目录结构及缓存数据保留策略</span><br><span class="line">    proxy_cache_path    /var/cache/nginx/proxy_cache levels=1:2 keys_zone=cache_one:512m inactive=1d max_size=2g;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">################################ 预防 DDOS 攻击配置策略 ################################</span><br><span class="line">    #limit_req_zone          \$binary_remote_addr  zone=req:20m   rate=3r/s;</span><br><span class="line">    #limit_req               zone=req  burst=60;</span><br><span class="line">    #limit_zone              conn \$binary_remote_addr  20m;</span><br><span class="line">    #limit_conn              conn 5;</span><br><span class="line">    #limit_rate              50k;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">################################设置nginx可以捕获的服务器名字（server_name）的最大数量################################</span><br><span class="line">    server_names_hash_max_size    1024;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">################################设置nginx中server_name支持的最大长度################################</span><br><span class="line">    server_names_hash_bucket_size 128;</span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="配置ip查询接口"><a href="#配置ip查询接口" class="headerlink" title="配置ip查询接口"></a>配置ip查询接口</h4><blockquote><p>在<code>/etc/nginx/conf.d/</code>目录下创建<code>ip.conf</code>文件并修改为下面配置内容。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">#path /etc/nginx/conf.d/ip.conf</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #listen 443 ssl http2;</span><br><span class="line">    #listen [::]:443 ssl http2;</span><br><span class="line">    #ssl_certificate /etc/nginx/conf.d/ssl/cert.pem;</span><br><span class="line">    #ssl_certificate_key /etc/nginx/conf.d/ssl/key.pem;</span><br><span class="line">    # server_name xxx.xxx.xxx;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    access_log /var/log/nginx/ip.log main;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    default_type text/plain;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        if ($http_user_agent ~* &quot;curl|wget&quot;) &#123;</span><br><span class="line">            rewrite / /ip last;</span><br><span class="line">        &#125;</span><br><span class="line">        rewrite / /info last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /ip &#123;</span><br><span class="line">        echo $remote_addr;</span><br><span class="line">    &#125;</span><br><span class="line">    location /country_code &#123;</span><br><span class="line">        echo $geoip2_data_country_code;</span><br><span class="line">    &#125;</span><br><span class="line">    location /country &#123;</span><br><span class="line">        echo $geoip2_data_country_name;</span><br><span class="line">    &#125;</span><br><span class="line">    location /province &#123;</span><br><span class="line">        echo $geoip2_data_province_name;</span><br><span class="line">    &#125;</span><br><span class="line">    location /city &#123;</span><br><span class="line">        echo $geoip2_data_city_name;</span><br><span class="line">    &#125;</span><br><span class="line">    location /latitude &#123;</span><br><span class="line">        echo $geoip2_data_location_latitude;</span><br><span class="line">    &#125;</span><br><span class="line">    location /longitude &#123;</span><br><span class="line">        echo $geoip2_data_location_longitude;</span><br><span class="line">    &#125;</span><br><span class="line">    location /ua &#123;</span><br><span class="line">        echo $http_user_agent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /info &#123;</span><br><span class="line">        echo &quot;IP ADDRESS   : $remote_addr&quot;;</span><br><span class="line">        echo &quot; &quot;;</span><br><span class="line">        echo &quot;COUNTRY CODE : $geoip2_data_country_code&quot;;</span><br><span class="line">        echo &quot;COUNTRY      : $geoip2_data_country_name&quot;;</span><br><span class="line">        echo &quot;PROVINCE     : $geoip2_data_province_name&quot;;</span><br><span class="line">        echo &quot;CITY         : $geoip2_data_city_name&quot;;</span><br><span class="line">        echo &quot; &quot;;</span><br><span class="line">        echo &quot;LATITUDE     : $geoip2_data_location_latitude&quot;;</span><br><span class="line">        echo &quot;LONGITUDE    : $geoip2_data_location_longitude&quot;;</span><br><span class="line">        echo &quot; &quot;;</span><br><span class="line">        echo &quot;USER AGENT   : $http_user_agent&quot;;</span><br><span class="line">        echo &quot;&quot;;</span><br><span class="line">        echo &quot;Use /help for more information&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">location /help &#123;</span><br><span class="line"></span><br><span class="line">    echo &quot;/                    IP INFO (browser) | IP ADDRESS (wget/curl)&quot;;</span><br><span class="line">    echo &quot; &quot;;</span><br><span class="line">    echo &quot;/ip                  IP ADDRESS&quot;;</span><br><span class="line">    echo &quot; &quot;;</span><br><span class="line">    echo &quot;/info                IP INFO&quot;;</span><br><span class="line">    echo &quot;/json                IP INFO (JSON)&quot;;</span><br><span class="line">    echo &quot; &quot;;</span><br><span class="line">    echo &quot;/country_code        COUNTRY CODE&quot;;</span><br><span class="line">    echo &quot;/country             COUNTRY NAME&quot;;</span><br><span class="line">    echo &quot;/province            PROVINCE NAME&quot;;</span><br><span class="line">    echo &quot;/city                CITY NAME&quot;;</span><br><span class="line">    echo &quot; &quot;;</span><br><span class="line">    echo &quot;/longitude           LONGITUDE&quot;;</span><br><span class="line">    echo &quot;/latitude            LATITUDE&quot;;</span><br><span class="line">    echo &quot; &quot;;</span><br><span class="line">    echo &quot;/ua                  USER AGENT&quot;;</span><br><span class="line">    echo &quot; &quot;;</span><br><span class="line">    echo &quot;Advanced:&quot;;</span><br><span class="line">    echo &quot;/&#123;cmd&#125;/&#123;ip&#125;          FIND IP INFO, eg: /info/1.1.1.1&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    location /json &#123;</span><br><span class="line">        default_type application/json;</span><br><span class="line">        return 200 &#x27;&#123;</span><br><span class="line">            &quot;ip&quot;: &quot;$remote_addr&quot;,</span><br><span class="line">            &quot;country_code&quot;: &quot;$geoip2_data_country_code&quot;,</span><br><span class="line">            &quot;country&quot;: &quot;$geoip2_data_country_name&quot;,</span><br><span class="line">            &quot;province&quot;: &quot;$geoip2_data_province_name&quot;,</span><br><span class="line">            &quot;city&quot;: &quot;$geoip2_data_city_name&quot;,</span><br><span class="line">            &quot;latitude&quot;: &quot;$geoip2_data_location_latitude&quot;,</span><br><span class="line">            &quot;longitude&quot;: &quot;$geoip2_data_location_longitude&quot;,</span><br><span class="line">            &quot;ua&quot;: &quot;$http_user_agent&quot;,</span><br><span class="line">            &quot;forwarded&quot;: &quot;$http_x_forwarded_for&quot;</span><br><span class="line">        &#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    location ~ ^/(\w+/)?(\d+\..+|\w*:.+)$ &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1/$1;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Forwarded-For $2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行<code>nginx -s reload</code>，访问<code>http://ip:80</code>，如果出现下面页面则说明配置成功。</p></blockquote><p><img src="https://img1.131213.xyz/file/c068a91988283ec1520e2.png" alt="c068a91988283ec1520e2.png"></p><h4 id="配置logrotate自动分割压缩日志"><a href="#配置logrotate自动分割压缩日志" class="headerlink" title="配置logrotate自动分割压缩日志"></a>配置logrotate自动分割压缩日志</h4><blockquote><p>创建<code>/etc/logrotate.d/nginx</code>文件并修改为下面配置内容。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#path /etc/logrotate.d/nginx</span><br><span class="line">/var/log/nginx/*.log &#123;</span><br><span class="line">        daily</span><br><span class="line">        missingok</span><br><span class="line">        rotate 52</span><br><span class="line">        compress</span><br><span class="line">        delaycompress</span><br><span class="line">        notifempty</span><br><span class="line">        create 640 nginx adm</span><br><span class="line">        sharedscripts</span><br><span class="line">        postrotate</span><br><span class="line">                if [ -f /var/run/nginx.pid ]; then</span><br><span class="line">                        kill -USR1 `cat /var/run/nginx.pid`</span><br><span class="line">                fi</span><br><span class="line">        endscript</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>手动运行logrotate命令来测试配置是否正确：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logrotate -f /etc/logrotate.d/nginx</span><br></pre></td></tr></table></figure><blockquote><p>确认一切正常后，您可以通过以下命令来实际执行logrotate并轮转日志文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logrotate /etc/logrotate.conf</span><br></pre></td></tr></table></figure><hr><p><em>参考:<a href="https://openresty.org/cn/installation.html">openresty.org</a></em></p>]]></content>
      
      
      
        <tags>
            
            <tag> openresty </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手教学！如何自己训练一个AI歌手 - so-vits-svc云端训练教程</title>
      <link href="/2023/08/26/so-vits-svc/"/>
      <url>/2023/08/26/so-vits-svc/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><a href="https://github.com/svc-develop-team/">so-vits-svc</a>是基于VITS的开源项目，VITS（Variational Inference with adversarial learning for end-to-end Text-to-Speech）是一种结合变分推理（variational inference）、标准化流（normalizing flows）和对抗训练的高表现力语音合成模型</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><blockquote><p>本文章使用的是腾讯云<code>GPU计算型GN7</code>,具体环境如下： </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 系统环境</span></span><br><span class="line">Ubuntu 22.04 LTS</span><br><span class="line"><span class="comment"># 显卡环境</span></span><br><span class="line">NVIDIA-SMI 470.182.03    Driver Version: 470.182.03    CUDA Version: 11.4</span><br><span class="line"><span class="comment"># python环境</span></span><br><span class="line">Python 3.10</span><br><span class="line"><span class="comment"># GPU环境</span></span><br><span class="line">Tesla T4 16G * 1</span><br><span class="line"><span class="comment"># CPU环境</span></span><br><span class="line">8核32GB</span><br></pre></td></tr></table></figure><p><img src="https://img1.131213.xyz/file/365404354399d97e8333b.png" alt="365404354399d97e8333b.png"><br><img src="https://img1.131213.xyz/file/87053539fd2c945364ffb.png" alt="87053539fd2c945364ffb.png"></p><h3 id="音频处理"><a href="#音频处理" class="headerlink" title="音频处理"></a>音频处理</h3><blockquote><p>为了训练，我们需要将音频文件分离成人声和伴奏两个音轨，并将人声音频文件切分成10-20秒的音频片段。</p></blockquote><ol><li>使用<code>Spleeter</code>分离人声音轨</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install ffmpeg</span><br><span class="line">pip install spleeter</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> spleeter &amp;&amp; <span class="built_in">cd</span> spleeter</span><br><span class="line"><span class="built_in">mkdir</span> raw</span><br><span class="line"><span class="comment">#下载模型</span></span><br><span class="line"><span class="built_in">mkdir</span> pretrained_models</span><br><span class="line">wget -P pretrained_models https://github.com/deezer/spleeter/releases/download/v1.4.0/2stems.tar.gz</span><br><span class="line"><span class="comment"># 境内vps下载太慢，可以使用下面的链接</span></span><br><span class="line"><span class="comment"># wget -P pretrained_models https://kgithub.com/deezer/spleeter/releases/download/v1.4.0/2stems.tar.gz</span></span><br><span class="line"><span class="built_in">mkdir</span> -p pretrained_models/2stems</span><br><span class="line">tar -zxvf pretrained_models/2stems.tar.gz -C pretrained_models/2stems/</span><br></pre></td></tr></table></figure><ol start="2"><li>测试分离人声</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试</span></span><br><span class="line">wget https://github.com/deezer/spleeter/raw/master/audio_example.mp3</span><br><span class="line">spleeter separate -p spleeter:2stems -o output audio_example.mp3</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">output/</span><br><span class="line">└── audio_example</span><br><span class="line">    ├── accompaniment.wav <span class="comment"># 伴奏</span></span><br><span class="line">    └── vocals.wav   <span class="comment"># 人声</span></span><br></pre></td></tr></table></figure><ol start="3"><li>批量分离音轨</li></ol><blockquote><p>将需要分离的音频文件放到<code>spleeter/raw</code>目录下，然后执行下面的命令<br>为了方便批量处理，可以使用下面的脚本<br>下面脚本将<code>raw</code>目录下的所有<code>.wav</code>文件分离成人声和伴奏两个音轨，并保存到<code>spleeter/audio_output</code>文件夹中</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建output文件夹（如果不存在）</span></span><br><span class="line"><span class="built_in">mkdir</span> -p audio_output</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历raw目录下的WAV文件</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> raw/*.wav; <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 检查文件类型是否为MP3</span></span><br><span class="line">  <span class="keyword">if</span> [[ -f <span class="string">&quot;<span class="variable">$file</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;正在处理文件: <span class="variable">$file</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提取文件名（不包括扩展名）</span></span><br><span class="line">    filename=$(<span class="built_in">basename</span> <span class="string">&quot;<span class="variable">$file</span>&quot;</span> .wav)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用spleeter命令进行分离并保存到audio_output/文件夹中</span></span><br><span class="line">    spleeter separate \</span><br><span class="line">        -o audio_output \</span><br><span class="line">        <span class="string">&quot;<span class="variable">$file</span>&quot;</span> \</span><br><span class="line">        -f <span class="string">&quot;<span class="variable">$filename</span>&quot;</span>_&#123;instrument&#125;.wav</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;分离完成！&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>效果如下</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-12-ubuntu:~/spleeter$ tree audio_output/</span><br><span class="line">audio_output/</span><br><span class="line">├── 11_accompaniment.wav</span><br><span class="line">├── 11_vocals.wav</span><br><span class="line">├── 12_accompaniment.wav</span><br><span class="line">├── 12_vocals.wav</span><br><span class="line">├── 13_accompaniment.wav</span><br><span class="line">└── 13_vocals.wav</span><br><span class="line"></span><br><span class="line">0 directories, 6 files</span><br></pre></td></tr></table></figure><ol start="4"><li>切分音频片段</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip librosa soundfile</span><br></pre></td></tr></table></figure><blockquote><p>执行下面脚本，将会从<code>audio_output</code>目录中的每个音频文件中提取出10-20秒的音频片段，并保存到<code>clips</code>目录中。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> librosa</span><br><span class="line"><span class="keyword">import</span> soundfile</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前工作目录</span></span><br><span class="line">cwd = os.getcwd()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置原始音频文件所在目录和新文件保存目录</span></span><br><span class="line">src_folder = os.path.join(cwd, <span class="string">&#x27;audio_output&#x27;</span>)  <span class="comment"># 原始音频文件所在目录</span></span><br><span class="line">dst_folder = os.path.join(cwd, <span class="string">&#x27;clips&#x27;</span>)  <span class="comment"># 新文件保存目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新文件保存目录</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dst_folder):</span><br><span class="line">    os.makedirs(dst_folder)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历源目录中的所有wav文件</span></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(src_folder):</span><br><span class="line">    <span class="keyword">if</span> filename.endswith(<span class="string">&quot;vocals.wav&quot;</span>):</span><br><span class="line">        audio_path = os.path.join(src_folder, filename)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Processing <span class="subst">&#123;audio_path&#125;</span>...&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 加载音频文件</span></span><br><span class="line">        audio, sr = librosa.load(audio_path, sr=<span class="literal">None</span>, mono=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 去除音频文件中的静音部分</span></span><br><span class="line">        audio_trimmed, index = librosa.effects.trim(audio, top_db=<span class="number">20</span>, frame_length=<span class="number">2048</span>, hop_length=<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算总时长和总采样点数</span></span><br><span class="line">        duration = <span class="built_in">len</span>(audio_trimmed[<span class="number">0</span>]) / sr</span><br><span class="line">        total_samples = audio_trimmed.shape[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 确定每个片段应该包含的采样点数</span></span><br><span class="line">        min_duration = <span class="number">10</span>  <span class="comment"># 最小片段长度（秒）</span></span><br><span class="line">        max_duration = <span class="number">20</span>  <span class="comment"># 最大片段长度（秒）</span></span><br><span class="line">        segment_duration = random.uniform(min_duration, max_duration)  <span class="comment"># 随机生成片段长度</span></span><br><span class="line">        segment_samples = <span class="built_in">int</span>(segment_duration * sr)  <span class="comment"># 将片段长度转换为采样点数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 循环遍历音频文件，并将每个片段保存为新的音频文件</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, total_samples, segment_samples):</span><br><span class="line">            start = i  <span class="comment"># 当前片段的起始采样点</span></span><br><span class="line">            end = <span class="built_in">min</span>(i + segment_samples, total_samples)  <span class="comment"># 当前片段的结束采样点</span></span><br><span class="line"></span><br><span class="line">            chunk = audio_trimmed[:, start:end]  <span class="comment"># 截取当前片段的音频数据</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(chunk.shape) &gt; <span class="number">1</span>:</span><br><span class="line">                chunk = chunk.T  <span class="comment"># 如果是立体声，则交换通道</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 构造新文件名</span></span><br><span class="line">            clip_filename = <span class="string">f&quot;<span class="subst">&#123;os.path.splitext(filename)[<span class="number">0</span>]&#125;</span>_<span class="subst">&#123;i//segment_samples&#125;</span>.wav&quot;</span></span><br><span class="line">            clip_path = os.path.join(dst_folder, clip_filename)</span><br><span class="line"></span><br><span class="line">            soundfile.write(clip_path, chunk, sr)  <span class="comment"># 保存当前片段的音频数据到文件中</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h3><ol><li>克隆存储库并安装依赖项</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/svc-develop-team/so-vits-svc.git</span><br><span class="line"><span class="built_in">cd</span> so-vits-svc</span><br><span class="line">python3 -m venv myenv</span><br><span class="line"><span class="built_in">source</span> myenv/bin/activate</span><br><span class="line">pip uninstall -y torchdata torchtext</span><br><span class="line">pip install --upgrade pip setuptools numpy numba</span><br><span class="line">pip install pyworld praat-parselmouth fairseq tensorboardX torchcrepe librosa==0.9.1 pyyaml pynvml pyloudnorm</span><br><span class="line">pip install torch torchvision torchaudio </span><br><span class="line">pip install rich loguru matplotlib</span><br><span class="line">pip install faiss-gpu</span><br><span class="line">pip uninstall omegaconf</span><br><span class="line">pip install omegaconf==2.0.5</span><br><span class="line">pip install antlr4-python3-runtime==4.8</span><br><span class="line">pip install antlr4-python3-runtime==4.8</span><br><span class="line">pip install tensorboard</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>数据集准备</li></ol><blockquote><p>将上一步中生成的音频片段文件夹<code>clips</code>移动到<code>so-vits-svc/dataset_raw</code>目录下，目录结构如下：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dataset_raw</span><br><span class="line">├───speaker0</span><br><span class="line">│   ├───xxx1-xxx1.wav</span><br><span class="line">│   ├───...</span><br><span class="line">│   └───Lxx-0xx8.wav</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><code>speaker0</code>  是合成目标说话人的名称。推理时需要用到该名称。<br>对于每一个音频文件的名称并没有格式的限制(000001.wav~999999.wav之类的命名方式也是合法的)，不过文件类型必须是wav。</p></blockquote><ol start="3"><li>获取预训练模型</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> so-vits-svc</span><br><span class="line"><span class="comment">#download_pretrained_model</span></span><br><span class="line">curl -L https://huggingface.co/datasets/ms903/sovits4.0-768vec-layer12/resolve/main/sovits_768l12_pre_large_320k/clean_D_320000.pth -o logs/44k/D_0.pth</span><br><span class="line">curl -L https://huggingface.co/datasets/ms903/sovits4.0-768vec-layer12/resolve/main/sovits_768l12_pre_large_320k/clean_G_320000.pth -o logs/44k/G_0.pth</span><br><span class="line"><span class="comment">#download_pretrained_diffusion_model</span></span><br><span class="line"><span class="comment">#不训练扩散模型时不需要下载</span></span><br><span class="line">wget -L https://huggingface.co/datasets/ms903/Diff-SVC-refactor-pre-trained-model/resolve/main/fix_pitch_add_vctk_600k/model_0.pt -o logs/44k/diffusion/model_0.pt</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果使用rmvpeF0预测器的话，需要下载预训练的 RMVPE 模型</span></span><br><span class="line">curl -L https://huggingface.co/datasets/ylzz1997/rmvpe_pretrain_model/resolve/main/rmvpe.pt -o pretrain/rmvpe.pt</span><br><span class="line">curl -L https://huggingface.co/datasets/ylzz1997/rmvpe_pretrain_model/resolve/main/fcpe.pt -o pretrain/fcpe.pt</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>使用 contentvec 作为声音编码器（推荐）</li></ol><p><code>vec768l12</code>与<code>vec256l9</code> 需要该编码器</p><ul><li>contentvec ：<a href="https://ibm.box.com/s/z1wgl1stco8ffooyatzdwsqn2psd9lrr">checkpoint_best_legacy_500.pt</a><ul><li>放在<code>pretrain</code>目录下</li></ul></li></ul><p>或者下载下面的 ContentVec，大小只有 199MB，但效果相同：</p><ul><li>contentvec ：<a href="https://huggingface.co/lj1995/VoiceConversionWebUI/resolve/main/hubert_base.pt">hubert_base.pt</a><ul><li>将文件名改为<code>checkpoint_best_legacy_500.pt</code>后，放在<code>pretrain</code>目录下</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">contentvec</span></span><br><span class="line">wget -P pretrain/ https://huggingface.co/lj1995/VoiceConversionWebUI/resolve/main/hubert_base.pt -O checkpoint_best_legacy_500.pt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">也可手动下载放在 pretrain 目录</span></span><br></pre></td></tr></table></figure><blockquote><p>更多编码器请参考<a href="https://github.com/svc-develop-team/so-vits-svc/blob/4.1-Stable/README_zh_CN.md#-%E9%A2%84%E5%85%88%E4%B8%8B%E8%BD%BD%E7%9A%84%E6%A8%A1%E5%9E%8B%E6%96%87%E4%BB%B6">so-vits-svc</a></p></blockquote><ol start="5"><li>重采样至 44100Hz 单声道</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python resample.py</span><br></pre></td></tr></table></figure><ol start="6"><li>自动划分训练集、验证集，以及自动生成配置文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python preprocess_flist_config.py --speech_encoder=vec768l12</span><br></pre></td></tr></table></figure><ol start="7"><li>生成 hubert 与 f0</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">python preprocess_hubert_f0.py --f0_predictor=crepe</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img1.131213.xyz/file/d259e8a5d04af5ef37347.png" alt="d259e8a5d04af5ef37347.png"></p><blockquote><p>加速预处理 如若您的数据集比较大，可以尝试添加–num_processes参数：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python preprocess_hubert_f0.py --f0_predictor=crepe --num_processes 8</span><br></pre></td></tr></table></figure><ol start="8"><li>主模型训练</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python train.py -c configs/config.json -m 44k</span><br></pre></td></tr></table></figure><blockquote><p>扩散模型（可选）, 尚若需要浅扩散功能，需要训练扩散模型，扩散模型训练方法为：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python train_diff.py -c configs/diffusion.yaml</span><br></pre></td></tr></table></figure><blockquote><p>用tensorboard查看训练情况</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensorboard --logdir logs/44k --host=0.0.0.0</span><br></pre></td></tr></table></figure><p><img src="https://img1.131213.xyz/file/2dbf82e248e02abde1b16.png" alt="2dbf82e248e02abde1b16.png"><br><img src="https://img1.131213.xyz/file/407edfd7f243e3cdcff29.png" alt="407edfd7f243e3cdcff29.png"></p><ol start="9"><li>聚类模型训练（可选）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python cluster/train_cluster.py --gpu</span><br></pre></td></tr></table></figure><blockquote><p>模型训练结束后，模型文件保存在<code>logs/44k</code>目录下，聚类模型会保存在<code>logs/44k/kmeans_10000.pt</code>,扩散模型在<code>logs/44k/diffusion</code>下 。</p></blockquote><h3 id="推理-（对配置要求不高可以用自己的电脑进行）"><a href="#推理-（对配置要求不高可以用自己的电脑进行）" class="headerlink" title="推理 （对配置要求不高可以用自己的电脑进行）"></a>推理 （对配置要求不高可以用自己的电脑进行）</h3><ol><li>参数说明</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例</span></span><br><span class="line">python inference_main.py -m <span class="string">&quot;logs/44k/G_30400.pth&quot;</span> -c <span class="string">&quot;configs/config.json&quot;</span> -n <span class="string">&quot;君の知らない物語-src.wav&quot;</span> -t 0 -s <span class="string">&quot;nen&quot;</span></span><br></pre></td></tr></table></figure><p>必填项部分：</p><ul><li><code>-m</code> | <code>--model_path</code>：模型路径</li><li><code>-c</code> | <code>--config_path</code>：配置文件路径</li><li><code>-n</code> | <code>--clean_names</code>：wav 文件名列表，放在 raw 文件夹下</li><li><code>-t</code> | <code>--trans</code>：音高调整，支持正负（半音）</li><li><code>-s</code> | <code>--spk_list</code>：合成目标说话人名称</li><li><code>-cl</code> | <code>--clip</code>：音频强制切片，默认 0 为自动切片，单位为秒&#x2F;s</li></ul><p>可选项部分：部分具体见下一节</p><ul><li><code>-lg</code> | <code>--linear_gradient</code>：两段音频切片的交叉淡入长度，如果强制切片后出现人声不连贯可调整该数值，如果连贯建议采用默认值 0，单位为秒</li><li><code>-f0p</code> | <code>--f0_predictor</code>：选择 F0 预测器，可选择 crepe,pm,dio,harvest,rmvpe,fcpe, 默认为 pm（注意：crepe 为原 F0 使用均值滤波器）</li><li><code>-a</code> | <code>--auto_predict_f0</code>：语音转换自动预测音高，转换歌声时不要打开这个会严重跑调</li><li><code>-cm</code> | <code>--cluster_model_path</code>：聚类模型或特征检索索引路径，留空则自动设为各方案模型的默认路径，如果没有训练聚类或特征检索则随便填</li><li><code>-cr</code> | <code>--cluster_infer_ratio</code>：聚类方案或特征检索占比，范围 0-1，若没有训练聚类模型或特征检索则默认 0 即可</li><li><code>-eh</code> | <code>--enhance</code>：是否使用 NSF_HIFIGAN 增强器，该选项对部分训练集少的模型有一定的音质增强效果，但是对训练好的模型有反面效果，默认关闭</li><li><code>-shd</code> | <code>--shallow_diffusion</code>：是否使用浅层扩散，使用后可解决一部分电音问题，默认关闭，该选项打开时，NSF_HIFIGAN 增强器将会被禁止</li><li><code>-usm</code> | <code>--use_spk_mix</code>：是否使用角色融合&#x2F;动态声线融合</li><li><code>-lea</code> | <code>--loudness_envelope_adjustment</code>：输入源响度包络替换输出响度包络融合比例，越靠近 1 越使用输出响度包络</li><li><code>-fr</code> | <code>--feature_retrieval</code>：是否使用特征检索，如果使用聚类模型将被禁用，且 cm 与 cr 参数将会变成特征检索的索引路径与混合比例</li></ul><p>浅扩散设置：</p><ul><li><code>-dm</code> | <code>--diffusion_model_path</code>：扩散模型路径</li><li><code>-dc</code> | <code>--diffusion_config_path</code>：扩散模型配置文件路径</li><li><code>-ks</code> | <code>--k_step</code>：扩散步数，越大越接近扩散模型的结果，默认 100</li><li><code>-od</code> | <code>--only_diffusion</code>：纯扩散模式，该模式不会加载 sovits 模型，以扩散模型推理</li><li><code>-se</code> | <code>--second_encoding</code>：二次编码，浅扩散前会对原始音频进行二次编码，玄学选项，有时候效果好，有时候效果差</li></ul><ol start="2"><li>推理</li></ol><blockquote><p>下面以<a href="https://pan.tryxd.cn/d/aliyundrive/so-vits-svc/sun-%E6%A8%A1%E5%9E%8B.7z">孙燕姿的模型</a>为例，演示如何使用 <code>so-vits-svc</code> 进行音色转换</p></blockquote><blockquote><p>模型地址：<a href="https://pan.tryxd.cn/d/aliyundrive/so-vits-svc/sun-%E6%A8%A1%E5%9E%8B.7z">孙燕姿模型</a></p></blockquote><blockquote><p>先看效果</p></blockquote><p>​<audio id="audio" controls="" preload="none"><br>      <source id="mp3" src="https://pan.tryxd.cn/d/aliyundrive/so-vits-svc/%E4%BA%BA%E6%9D%A5%E4%BA%BA%E5%BE%80-%E5%AD%99%E7%87%95%E5%A7%BF.wav"><br></audio></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例</span></span><br><span class="line">spleeter separate -o raw 人来人往.wav -f 人来人往_&#123;instrument&#125;.wav</span><br><span class="line">python inference_main.py -m <span class="string">&quot;logs/44k/G_27200.pth&quot;</span> -c <span class="string">&quot;configs/sun.json&quot;</span> -n <span class="string">&quot;人来人往_vocals.wav&quot;</span> -t 0 -s <span class="string">&quot;sun&quot;</span> -cm <span class="string">&quot;logs/44k/kmeans_10000.pt&quot;</span> </span><br></pre></td></tr></table></figure><blockquote><p><code>logs/44k/G_27200.pth</code>为主模型<br><code>configs/sun.json</code>为配置文件<br><code>人来人往_vocals.wav</code> 为<code>raw</code>目录下待转换的<code>人声</code>音频文件<br><code>sun</code>为目标说话人名称(configs&#x2F;sun.json中的spk对应的vlaue)<br><code>logs/44k/kmeans_10000.pt</code>为聚类模型</p></blockquote><p><img src="https://img1.131213.xyz/file/f0553cd31dd50ac6b8b81.png" alt="f0553cd31dd50ac6b8b81.png"></p><blockquote><p>分享的<a href="https://pan.tryxd.cn/d/aliyundrive/so-vits-svc/sun-%E6%A8%A1%E5%9E%8B.7z">孙燕姿模型</a>由于是4.0版本的，需要在 config.json 的 model 字段中添加 speech_encoder 字段，具体如下：</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;model&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  .........</span><br><span class="line">  <span class="attr">&quot;ssl_dim&quot;</span><span class="punctuation">:</span> <span class="number">256</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;n_speakers&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;speech_encoder&quot;</span><span class="punctuation">:</span><span class="string">&quot;vec256l9&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://img1.131213.xyz/file/1b6e53d58cf52db149347.png" alt="1b6e53d58cf52db149347.png"></p><ol start="2"><li>合并人声与伴奏</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i 人来人往_accompaniment.wav -i 人来人往_vocals.wav_0key_sun_sovits_pm.flac -filter_complex amix=inputs=2:duration=first:dropout_transition=3 output.wav</span><br></pre></td></tr></table></figure><h4 id="参考：https-github-com-svc-develop-team-so-vits-svc-tree-4-1-Stable"><a href="#参考：https-github-com-svc-develop-team-so-vits-svc-tree-4-1-Stable" class="headerlink" title="参考：https://github.com/svc-develop-team/so-vits-svc/tree/4.1-Stable"></a>参考：<a href="https://github.com/svc-develop-team/so-vits-svc/tree/4.1-Stable">https://github.com/svc-develop-team/so-vits-svc/tree/4.1-Stable</a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> so-vits-svc </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自建邮局 | Poste.io邮箱服务搭建教程</title>
      <link href="/2023/08/22/posteio-mail/"/>
      <url>/2023/08/22/posteio-mail/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><a href="https://poste.io/">poste.io</a> 邮件服务基于 Docker 搭建，用的是 Haraka + Dovecot + SQLite 邮件系统，能够轻易实现邮件收发、多域名控制、邮箱容量控制、邮件杀毒、邮件过滤以及 Webmail 等基础功能。同时，Poste 还提供了投递统计分析、客户端自动适配、一键安装SSL、邮件转发、邮件别名、Catch-All 等相当有用的功能。</p><h3 id="快速安装"><a href="#快速安装" class="headerlink" title="快速安装"></a>快速安装</h3><blockquote><p><a href="https://poste.io/">poste.io</a>原生支持docker，占用资源较少，安装简单，适合个人使用。</p></blockquote><h4 id="dns配置"><a href="#dns配置" class="headerlink" title="dns配置"></a>dns配置</h4><blockquote><p>为了能够正常使用邮件服务，需要配置域名的 MX 记录，将邮件服务器的地址指向你的域名。下文以<code>mail.your-domain.com</code>为例。</p></blockquote><table><thead><tr><th align="center">记录类型</th><th align="center">主机记录</th><th align="center">记录值</th></tr></thead><tbody><tr><td align="center">MX</td><td align="center">your-domain.com</td><td align="center">mail.your-domain.com</td></tr><tr><td align="center">TXT</td><td align="center">your-domain.com</td><td align="center">v&#x3D;spf1 mx ~all</td></tr><tr><td align="center">A</td><td align="center">mail</td><td align="center">1.2.3.4 (your ip)</td></tr><tr><td align="center">TXT</td><td align="center">_dmarc</td><td align="center">v&#x3D;DMARC1; p&#x3D;none; pct&#x3D;100; rua&#x3D;mailto:<a href="mailto:&#x6d;&#97;&#x69;&#x6c;&#64;&#x79;&#x6f;&#117;&#x72;&#x2d;&#100;&#x6f;&#109;&#97;&#x69;&#110;&#46;&#x63;&#x6f;&#x6d;">&#x6d;&#97;&#x69;&#x6c;&#64;&#x79;&#x6f;&#117;&#x72;&#x2d;&#100;&#x6f;&#109;&#97;&#x69;&#110;&#46;&#x63;&#x6f;&#x6d;</a></td></tr><tr><td align="center">CNAME</td><td align="center">imap</td><td align="center">mail</td></tr><tr><td align="center">CNAME</td><td align="center">smtp</td><td align="center">mail</td></tr><tr><td align="center">CNAME</td><td align="center">pop</td><td align="center">mail</td></tr><tr><td align="center">TXT</td><td align="center">_s20160910378._domainkey.your-domain.com</td><td align="center">k&#x3D;rsa;p&#x3D;MII………</td></tr></tbody></table><blockquote><p>最后还需要到 VPS 服务商处添加一个反向 DNS，也就是 rDNS 解析，把 IP 解析到 mail.your-domain.com 这个邮件域名就好了，这个为可选项，有些 VPS 商家不提供这种服务。</p></blockquote><p><img src="/../img/posteio/posteio2.png" alt="posteio"></p><blockquote><p>以上 DNS 解析，至少需要添加前面三个 A 解析和 MX 解析，后面几个解析为可选，不添加也能用。</p></blockquote><h4 id="修改VPS-hostname"><a href="#修改VPS-hostname" class="headerlink" title="修改VPS hostname"></a>修改VPS hostname</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname mail.your-domain.com</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改hosts文件</span></span><br><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加一行</span></span><br><span class="line">127.0.1.1 localhost.localdomain mail.your-domain.com</span><br></pre></td></tr></table></figure><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装docker</span></span><br><span class="line">curl -sSL https://get.docker.com/ | sh</span><br><span class="line"><span class="comment"># 启动docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="comment"># 设置开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h4 id="安装poste-io"><a href="#安装poste-io" class="headerlink" title="安装poste.io"></a>安装poste.io</h4><blockquote><p>用docker compose安装,在要部署<code>poste.io</code>的目录下创建docker-compose.yml文件</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mailserver:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">analogic/poste.io</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">mail.your-domain.com</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;25:25&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;110:110&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;143:143&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;587:587&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;993:993&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;995:995&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;4190:4190&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;465:465&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8808:80&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8843:443&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">LETSENCRYPT_EMAIL=admin@your-domain.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">LETSENCRYPT_HOST=mail.your-domain.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">VIRTUAL_HOST=mail.your-domain.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DISABLE_CLAMAV=TRUE</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">HTTPS=OFF</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mail-data:/data</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>服务</th><th>端口</th><th>说明</th></tr></thead><tbody><tr><td>SMTP</td><td>25</td><td>SMTP 服务端口</td></tr><tr><td>IMAP</td><td>143</td><td>IMAP 服务端口</td></tr><tr><td>POP3</td><td>110</td><td>POP3 服务端口</td></tr><tr><td>SMTPS</td><td>465</td><td>SMTPS 服务端口</td></tr><tr><td>IMAPS</td><td>993</td><td>IMAPS 服务端口</td></tr><tr><td>POP3S</td><td>995</td><td>POP3S 服务端口</td></tr><tr><td>MSA</td><td>587</td><td>SMTP 端口主要由电子邮件客户端在 STARTTLS 和身份验证之后使用</td></tr><tr><td>Sieve</td><td>4190</td><td>远程筛子设置</td></tr><tr><td>Webmail</td><td>8808</td><td>Webmail 服务端口</td></tr><tr><td>Webmail</td><td>8843</td><td>Webmail 服务端口</td></tr></tbody></table><blockquote><p>请注意修改里面的域名和存储路径。</p></blockquote><blockquote><p>禁用反病毒功能（DISABLE_CLAMAV&#x3D;TRUE）、禁用反垃圾邮件功能（DISABLE_RSPAMD&#x3D;TRUE），可以大幅减低内存和CPU占用，请酌情设置禁用选项。</p></blockquote><blockquote><p>禁用WEB收发功能（DISABLE_ROUNDCUBE&#x3D;TRUE），可以进一步减少资源占用，不过非必要不建议禁止。</p></blockquote><blockquote><p><code>8808</code>为http端口，可以根据自己的需求修改。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动poste.io</span></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h4 id="配置NGINX反向代理"><a href="#配置NGINX反向代理" class="headerlink" title="配置NGINX反向代理"></a>配置NGINX反向代理</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">upstream poste_backend &#123;</span><br><span class="line">    server 127.0.0.1:8808;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    listen 443 ssl http2;</span><br><span class="line">    server_name mail.your-domain.com;</span><br><span class="line">    ssl_certificate /etc/nginx/conf.d/ssl/cert.pem;</span><br><span class="line">    ssl_certificate_key /etc/nginx/conf.d/ssl/key.pem;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    add_header Strict-Transport-Security <span class="string">&quot;max-age=31536000; includeSubdomains;&quot;</span>;</span><br><span class="line">    access_log /var/log/nginx/mail.log main;</span><br><span class="line"></span><br><span class="line">    location ^~ /.well-known &#123;</span><br><span class="line">        proxy_pass http://poste_backend;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://poste_backend;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_intercept_errors off;</span><br><span class="line">        <span class="comment"># real-ip</span></span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        proxy_set_header REMOTE-HOST <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># websocket</span></span><br><span class="line">        proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        proxy_set_header Connection <span class="string">&#x27;upgrade&#x27;</span>;</span><br><span class="line">        proxy_read_timeout 86400;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$server_port</span> = 80 ) &#123;</span><br><span class="line">        <span class="built_in">return</span> 301 https://$host<span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="配置poste-io"><a href="#配置poste-io" class="headerlink" title="配置poste.io"></a>配置poste.io</h4><blockquote><p>通过浏览器访问<code>https://mail.your-domain.com</code>，进入poste.io的配置页面，按照提示进行配置即可。</p></blockquote><ol><li>1、设置管理员账户以及密码，然后进入后台管理页面。</li></ol><p><img src="/../img/posteio/a1.png" alt="posteio"></p><ol start="2"><li>配置 Let’s Encrypt 证书。</li></ol><p><img src="/../img/posteio/posteio3.png" alt="posteio"><br><img src="/../img/posteio/posteio4.png" alt="posteio"></p><ol start="3"><li>创建 dkim 密钥，生成 key，添加到 DNS 解析记录，就是上面最后一条解析 _s20160910378._domainkey.your-domain.com</li></ol><blockquote><p>左侧点击 Virtual domains 然后点击域名进行配置。</p></blockquote><blockquote><p>点击 DKIM keys，然后点击 Generate new key，生成 key，添加到 DNS 解析记录，就是上面最后一条解析 _s20160910378._domainkey.your-domain.com</p></blockquote><p><img src="/../img/posteio/posteio5.png" alt="posteio"></p><h3 id="配置邮件客户端"><a href="#配置邮件客户端" class="headerlink" title="配置邮件客户端"></a>配置邮件客户端</h3><blockquote><p>第三方客户端 <code>SMTP/IMAP/POP3</code> 配置</p></blockquote><table><thead><tr><th>协议</th><th>服务器地址</th><th>端口</th><th>SSL</th></tr></thead><tbody><tr><td>SMTP</td><td>mail.your-domain.com,smtp.your-domain.com</td><td>25, 465, 587</td><td>STARTTLS</td></tr><tr><td>IMAP</td><td>mail.your-domain.com,imap.your-domain.com</td><td>993, 143</td><td>STARTTLS</td></tr><tr><td>POP3</td><td>mail.your-domain.com,pop.your-domain.com</td><td>995, 110</td><td>STARTTLS</td></tr></tbody></table><p>参考：<a href="https://poste.io/doc">https://poste.io/doc</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> mail </tag>
            
            <tag> 邮箱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>显卡跑不动AI绘图？部署Stable Diffusion WebUI到Google Colab教学。</title>
      <link href="/2023/03/20/stable-diffusion/"/>
      <url>/2023/03/20/stable-diffusion/</url>
      
        <content type="html"><![CDATA[<p>如果你的电脑GPU无法运行AI绘图&#x2F;模型训练，可以尝试使用Google Colab在线运行Stable Diffsuion WebUI，基本上是免费的。</p><p>Google Colab是一个免费的工具，但使用免费版需要与其他人共享资源，并且有可能会不定时断开连接。</p><p>使用方法与在自己电脑上运行Stable Diffsuion WebUI相同，不同之处在于它在Google服务器上运行，并且即使是免费版也能享受比RTX3090还高的服务器GPU性能，在10秒内就能计算一张图片。</p><h3 id="1、寻找Stable-Diffsuion-Colab"><a href="#1、寻找Stable-Diffsuion-Colab" class="headerlink" title="1、寻找Stable Diffsuion Colab"></a>1、寻找Stable Diffsuion Colab</h3><p>Stable Diffusion WebUI有很多人已经写好了方便使用的<code>jupyter</code>了，通常只需要一键操作就能自动下载AUTOMATIC1111制作的WebUI、模型和扩展功能。</p><p>本文所采用的是<code>camenduru</code>编写的<a href="https://github.com/camenduru/stable-diffusion-webui-colab">stable-diffusion-webui-colab</a> <code>jupyter</code>，作者一直在更新。除了绘图外，它还可以用于训练模型。</p><p>Linaqruf制作的<a href="https://github.com/Linaqruf/kohya-trainer">kohya-trainer</a>则是专门用来训练LoRA模型的<code>jupyter</code>。</p><h3 id="2、部署Stable-Diffusion-WebUI"><a href="#2、部署Stable-Diffusion-WebUI" class="headerlink" title="2、部署Stable Diffusion WebUI"></a>2、部署Stable Diffusion WebUI</h3><ol><li>在Github上选择要使用的<code>jupyter</code>，例如生成高清真实人像<code>Chilloutmix</code>模型，然后点击左侧的<code>stable</code> (稳定版)。作者<code>main</code>分支的笔记本不会占用云存储空间，所有文件都是在运行时才下载，并且使用完毕即可删除。</li></ol><p><img src="/../img/stable_diffusion/Chilloutmix.png" alt="Chilloutmix"></p><p>你也可以选择使用<code>Drive</code>分支的<code>jupyter</code>，它会把程序和模型存储在你的谷歌云盘中。这样就能保存上次进度，下次打开也会更快。但是需要至少5GB空间来存放程序和模型，以此作为代价。</p><ol start="2"><li>点击笔记本后会跳转到Google Colab的页面，然后点击右上角的<code>连接</code>按钮以连接服务器。</li></ol><p><img src="/../img/stable_diffusion/Stable_Diffusion1.png" alt="Stable Diffusion"></p><ol start="3"><li>点选上方的选→代码执行程序→更改运行时类型，确认目前硬件加速器是使用GPU。</li></ol><p><img src="/../img/stable_diffusion/Stable_Diffusion2.png" alt="Stable Diffusion"></p><ol start="4"><li>点选左上角，执行。</li></ol><p><img src="/../img/stable_diffusion/Stable_Diffusion3.png" alt="Stable Diffusion"></p><ol start="5"><li><p>接着会部署环境和下载模型，通常5分钟就跑完了。 </p></li><li><p>页面往下滑会看到系统输出。它会显示一组网址，点选Gradio或者Cloudflare的链接进入WebUI (链接72小时后失效，但Google Colab免费版最长运行时间为12小时)</p></li></ol><p><img src="/../img/stable_diffusion/Stable_Diffusion4.png" alt="Stable Diffusion"></p><ol start="7"><li>进入WebUI后，用法跟本机部署的Stable Diffsusion一样。</li></ol><p><img src="/../img/stable_diffusion/Stable_Diffusion5.png" alt="Stable Diffusion"></p><blockquote><p>想换成亮色界面请将网址dark改成light即可。</p></blockquote><h3 id="3、下载图片"><a href="#3、下载图片" class="headerlink" title="3、下载图片"></a>3、下载图片</h3><p>Google Colab在关闭工作流后会清空文件，因此绘制的图片记得要及时保存。</p><ol><li>左边的文件夹图标。绘制的图片会存在<code>stable-diffusion-webui/outputs</code>文件夹下，右键选中可下载图片。</li></ol><p><img src="/../img/stable_diffusion/Stable_Diffusion7.png" alt="Stable Diffusion"></p><ol start="2"><li>批量下载</li></ol><p>点击<code>+代码</code>添加下面代码，打包生成的图片</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">＃您可以在/content/generated.zip中下载生成的图像</span><br><span class="line">!zip -r /content/generated.zip /content/stable-diffusion-webui/outputs/</span><br></pre></td></tr></table></figure><p>先暂停Stable Diffusion后 如下图点击开始图标即可生成<code>generated.zip</code>图片压缩包</p><p><img src="/../img/stable_diffusion/Stable_Diffusion6.png" alt="Stable Diffusion"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Google Colab </tag>
            
            <tag> Stable Diffusion WebUI </tag>
            
            <tag> AI 绘画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows Terminal美化</title>
      <link href="/2023/03/11/windows-terminal/"/>
      <url>/2023/03/11/windows-terminal/</url>
      
        <content type="html"><![CDATA[<h2 id="Windows-Terminal美化（oh-my-posh3）"><a href="#Windows-Terminal美化（oh-my-posh3）" class="headerlink" title="Windows Terminal美化（oh-my-posh3）"></a>Windows Terminal美化（oh-my-posh3）</h2><blockquote><p><a href="https://ohmyposh.dev/docs/">官网 https://ohmyposh.dev/docs/</a></p></blockquote><ol><li><p>直接在微软商店搜索oh my posh下载（同时若没有Windows Terminal的可以安装一下Windows Terminal）</p></li><li><p>下载作者推荐MesloLGM NF字体，<a href="https://github.com/ryanoasis/nerd-fonts/releases/download/v2.3.3/Meslo.zip">点此下载</a></p></li></ol><blockquote><p>下载完成后解压，全选右键点击安装即可自动安装</p></blockquote><ol start="3"><li>安装完成后打开Windows Terminal然后按”Ctrl+Shift+,（逗号）”来打开settings.json配置文件</li></ol><p>将此处</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;copyFormatting&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;copyOnSelect&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;defaultProfile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;profiles&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;defaults&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">        ...</span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>改成</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;copyFormatting&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;copyOnSelect&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;defaultProfile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;profiles&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;defaults&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;font&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;face&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MesloLGM NF&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">        ...</span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>编辑您的PowerShell配置文件脚本</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notepad <span class="variable">$PROFILE</span></span><br></pre></td></tr></table></figure><blockquote><p>第一次会显示找不到该文件，请确保先创建配置文件。命令如下</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">New-Item -Path <span class="variable">$PROFILE</span> -Type File -Force</span><br></pre></td></tr></table></figure><blockquote><p>然后运行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notepad <span class="variable">$PROFILE</span></span><br></pre></td></tr></table></figure><blockquote><p>添加以下行。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oh-my-posh init pwsh | Invoke-Expression</span><br></pre></td></tr></table></figure><!-- ../../../../img/vim_1.png --><p><img src="/../img/windows_terminal/oh-my-posh_20230311171335.png" alt="PowerShell阻止运行本地脚本"></p><blockquote><p>在这种情况下，可能是PowerShell阻止运行本地脚本。为了解决这个问题，请使用Set-ExecutionPolicy RemoteSigned将PowerShell设置为仅需要签名的远程脚本，或者对配置文件进行签名。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy -Scope CurrentUser RemoteSigned </span><br></pre></td></tr></table></figure><p>然后回到Windows terminal新建一个powershell，即可看到以下内容<br><img src="/../img/windows_terminal/oh-my-posh_20230311171607.png" alt="Windows terminal新建一个powershell"></p><ol start="5"><li>此处使用的是默认主题，若想修改主题，可以先使用以下命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-PoshThemes</span><br></pre></td></tr></table></figure><blockquote><p>查看主题，然后在最下面可以找到主题文件的目录</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Themes location: C:\Users\26535\AppData\Local\Programs\oh-my-posh\themes</span><br><span class="line"></span><br><span class="line">To change your theme, adjust the init script <span class="keyword">in</span> C:\Users\26535\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1.</span><br><span class="line">Example:</span><br><span class="line">  oh-my-posh init pwsh --config <span class="string">&#x27;C:\Users\26535\AppData\Local\Programs\oh-my-posh\themes\negligible.omp.json&#x27;</span> | Invoke-Expression</span><br></pre></td></tr></table></figure><blockquote><p>按住Ctrl点击该链接即可打开该文件夹，然后将所想要的主题的主题文件（一般都是”主题.omp.json”）路径复制下来，再到Windows Terminal中输入</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">notepad</span> <span class="variable">$profile</span></span><br></pre></td></tr></table></figure><blockquote><p>打开之前的配置文件,将文件路径加在此处（注意，前面要加上–config，后面文件路径要去除双引号）此处以negligible主题为例</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oh-my-posh init pwsh --config <span class="string">&#x27;C:\Users\26535\AppData\Local\Programs\oh-my-posh\themes\negligible.omp.json&#x27;</span> | Invoke-Expression</span><br></pre></td></tr></table></figure><blockquote><p>使主题生效</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">. <span class="variable">$PROFILE</span></span><br></pre></td></tr></table></figure><blockquote><p>效果<br><img src="/../img/windows_terminal/negligible_20230311174600.png" alt="negligible"></p></blockquote><blockquote><p>vscode 终端图标乱码，加字体解决<br><img src="/../img/windows_terminal/vscode_20230311180216.png" alt="vscode 终端图标乱码"></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> terminal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cloudflare tunnel 搭建内网穿透搭建记录</title>
      <link href="/2023/02/26/cloudflare-tunnel/"/>
      <url>/2023/02/26/cloudflare-tunnel/</url>
      
        <content type="html"><![CDATA[<h3 id="1、前提条件"><a href="#1、前提条件" class="headerlink" title="1、前提条件"></a>1、前提条件</h3><ul><li>一个托管于Cloudflare的域名，相关教程看这里创建 Cloudflare 帐户并添加网站</li><li>一台本地Linux Web机器，即内网穿透的对象</li><li>正常网络连接</li></ul><h3 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a>2、配置</h3><h4 id="创建tunnel"><a href="#创建tunnel" class="headerlink" title="创建tunnel"></a>创建tunnel</h4><p>我们登陆Cloudflare Zero Trust的 <a href="https://one.dash.cloudflare.com/">Web控制台</a> ，左边选择Access–&gt;Tunnels， 点击<code>Create a tunnel</code> 创建tunnel。</p><img src="https://img.131213.xyz/file/a63227399467dfce74691.png"  height="50%" width="50%"><h4 id="获取Tunnel的token"><a href="#获取Tunnel的token" class="headerlink" title="获取Tunnel的token"></a>获取Tunnel的token</h4><blockquote><p>token是install 后的一大串字符 记下来备用</p></blockquote><img src="https://img.131213.xyz/file/ac386e28df87f3610e6f1.png"  height="50%" width="50%"><h4 id="配置要内网穿透的服务"><a href="#配置要内网穿透的服务" class="headerlink" title="配置要内网穿透的服务"></a>配置要内网穿透的服务</h4><img src="https://img.131213.xyz/file/c9ed0e074be12ac4b4d3f.png"  height="50%" width="50%"><p>Public Hostname里面添加域名和对应的本地服务，域名前缀自定义，后期也可以在此直接修改或添加，支持多个服务！</p><p>支持添加HTTP、HTTPS、TCP、SSH 、… ,若需要完整版请至 <a href="https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/tunnel-guide/local/local-management/ingress/">Ingress rules</a> 页面查看。</p><h3 id="3、在本地安装Cloudflare-Tunnel客户端"><a href="#3、在本地安装Cloudflare-Tunnel客户端" class="headerlink" title="3、在本地安装Cloudflare Tunnel客户端"></a>3、在本地安装Cloudflare Tunnel客户端</h3><h4 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd \</span><br><span class="line">           --name tunnel \</span><br><span class="line">           --network=host \</span><br><span class="line">           --restart=always \</span><br><span class="line">           cloudflare/cloudflared:latest \</span><br><span class="line">          tunnel --no-autoupdate run --token 上面获取的token</span><br></pre></td></tr></table></figure><ul><li>暂停服务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop tunnel</span><br></pre></td></tr></table></figure><ul><li>启动服务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start tunnel</span><br></pre></td></tr></table></figure><h4 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o /usr/bin/cloudflared -L <span class="string">&quot;https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x /usr/bin/cloudflared </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#运行</span></span><br><span class="line">sudo cloudflared service install 上面获取的token</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="https://img.131213.xyz/file/31779983405ac04f0f685.png"  height="50%" width="50%"><ul><li><p>暂停服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop cloudflared </span><br></pre></td></tr></table></figure></li><li><p>启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start cloudflared </span><br></pre></td></tr></table></figure></li></ul><img src="https://img.131213.xyz/file/be2caa66b606b93e3e3d7.png"  height="50%" width="50%">]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> cloudflare </tag>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pm2常用命令记录</title>
      <link href="/2022/10/11/pm2/"/>
      <url>/2022/10/11/pm2/</url>
      
        <content type="html"><![CDATA[<h2 id="pm2常用命令记录"><a href="#pm2常用命令记录" class="headerlink" title="pm2常用命令记录"></a>pm2常用命令记录</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --interpreter指定解释器</span></span><br><span class="line">pm2 <span class="built_in">start</span> main.py -x <span class="comment">--interpreter python3</span></span><br><span class="line">pm2 <span class="built_in">start</span> app.js <span class="comment"># 启动app.js应用程序</span></span><br><span class="line">pm2 <span class="built_in">start</span> app.js -i <span class="number">4</span>        <span class="comment"># cluster mode 模式启动4个app.js的应用实例  4个应用程序会自动进行负载均衡</span></span><br><span class="line">pm2 <span class="built_in">start</span> app.js <span class="comment">--name=&quot;api&quot; # 启动应用程序并命名为 &quot;api&quot;</span></span><br><span class="line">pm2 <span class="built_in">start</span> app.js <span class="comment">--watch      # 当文件变化时自动重启应用</span></span><br><span class="line">pm2 <span class="built_in">start</span> script.sh          <span class="comment"># 启动 bash 脚本</span></span><br><span class="line">pm2 list                      <span class="comment"># 列表 PM2 启动的所有的应用程序</span></span><br><span class="line">pm2 monit                    <span class="comment"># 显示每个应用程序的CPU和内存占用情况</span></span><br><span class="line">pm2 show [app-name]          <span class="comment"># 显示应用程序的所有信息</span></span><br><span class="line">pm2 logs                      <span class="comment"># 显示所有应用程序的日志</span></span><br><span class="line">pm2 logs [app-name]          <span class="comment"># 显示指定应用程序的日志</span></span><br><span class="line">pm2 flush                       <span class="comment"># 清空所有日志文件</span></span><br><span class="line">pm2 <span class="built_in">stop</span> all                  <span class="comment"># 停止所有的应用程序</span></span><br><span class="line">pm2 <span class="built_in">stop</span> <span class="number">0</span>                    <span class="comment"># 停止 id为 0的指定应用程序</span></span><br><span class="line">pm2 restart all              <span class="comment"># 重启所有应用</span></span><br><span class="line">pm2 reload all                <span class="comment"># 重启 cluster mode下的所有应用</span></span><br><span class="line">pm2 gracefulReload all        <span class="comment"># Graceful reload all apps in cluster mode</span></span><br><span class="line">pm2 <span class="built_in">delete</span> all                <span class="comment"># 关闭并删除所有应用</span></span><br><span class="line">pm2 <span class="built_in">delete</span> <span class="number">0</span>                  <span class="comment"># 删除指定应用 id 0</span></span><br><span class="line">pm2 scale api <span class="number">10</span>              <span class="comment"># 把名字叫api的应用扩展到10个实例</span></span><br><span class="line">pm2 reset [app-name]          <span class="comment"># 重置重启数量</span></span><br><span class="line">pm2 startup                  <span class="comment"># 创建开机自启动命令</span></span><br><span class="line">pm2 save                      <span class="comment"># 保存当前应用列表</span></span><br><span class="line">pm2 resurrect                <span class="comment"># 重新加载保存的应用列表</span></span><br><span class="line">pm2 update                    <span class="comment"># Save processes, kill PM2 and restore processes</span></span><br><span class="line">pm2 generate                  <span class="comment"># Generate a sample json configuration file</span></span><br></pre></td></tr></table></figure><blockquote><p>pm2文档地址：<a href="http://pm2.keymetrics.io/docs/usage/quick-start/">http://pm2.keymetrics.io/docs/usage/quick-start/</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> pm2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim无法右键鼠标粘贴解决方法</title>
      <link href="/2022/05/25/vim-1/"/>
      <url>/2022/05/25/vim-1/</url>
      
        <content type="html"><![CDATA[<h3 id="修改vim配置文件"><a href="#修改vim配置文件" class="headerlink" title="修改vim配置文件"></a>修改vim配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/share/vim/vim82/defaults.vim</span><br></pre></td></tr></table></figure><blockquote><p>将 set mouse&#x3D;a 改为：set mouse-&#x3D;a</p></blockquote><p><img src="/../../../../img/vim_1.png" alt="vim无法右键鼠标粘贴解决方法"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Heroku 部署免费 nodejs 后端服务</title>
      <link href="/2022/03/08/heroku/"/>
      <url>/2022/03/08/heroku/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>也许你曾经使用过 github page 或者其他的静态网站托管服务部署自己的博客或者前端页面。但是只有前端还远远算不上一个网站。这篇文章就来介绍一下如何一分钱不花的部署一个后端服务。</p><p>我们使用的平台叫做 heroku，如果你没有听说过它的话，没有关系，heroku 是一个老牌的云平台提供商。你可以通过它非常简单的部署一个在线应用。并且只需要注册就可以领取一定量的免费服务器使用额度（截至到 2021&#x2F;3&#x2F;26，heroku 提供的免费额度为 550 小时&#x2F;月），作为个人服务，这些时长已经足够我们使用的了。</p><p>heroku 自我介绍<br>本文将介绍如何使用 heroku 部署一个 nodejs 后端服务，当然 heroku 还支持其他语言，你可以点击 <a href="https://devcenter.heroku.com/start">这里</a>查看它所支持的所有编程语言。</p><p>注册 &amp; 安装工具<br>现在我们就来准备一下需要的工具，首先我们打开 <a href="https://signup.heroku.com/login">heroku - 注册</a> 来注册我们的账号。注意有可能存在网站打不开的情况，请自备梯子。注册完成后会让你进行邮箱验证，没什么好说的。</p><p>注册完成之后我们就可以安装工具，想要部署 Heroku 应用，我们需要用到 heroku 命令行工具，你可以在 <a href="https://devcenter.heroku.com/articles/getting-started-with-nodejs#set-up">这里</a> 找到下载链接。除了 heroku 之外，我们还需要用到 git 和 node，安装完成后我们在终端里执行如下命令来检查是否安装成功：</p><h3 id="查看-heroku-是否安装完成"><a href="#查看-heroku-是否安装完成" class="headerlink" title="查看 heroku 是否安装完成"></a>查看 heroku 是否安装完成</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">heroku -v</span></span><br></pre></td></tr></table></figure><blockquote><p>heroku&#x2F;7.59.3 linux-x64 node-v12.21.0</p></blockquote><h3 id="查看-git-是否安装完成"><a href="#查看-git-是否安装完成" class="headerlink" title="查看 git 是否安装完成"></a>查看 git 是否安装完成</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git --version</span></span><br></pre></td></tr></table></figure><blockquote><p>git version 2.25.1</p></blockquote><h3 id="查看-node-是否安装完成"><a href="#查看-node-是否安装完成" class="headerlink" title="查看 node 是否安装完成"></a>查看 node 是否安装完成</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">node -v</span></span><br></pre></td></tr></table></figure><blockquote><p>v16.13.1<br>需要的工具都准备好了，我们在终端中执行如下命令来登录 heroku，登录时会要求提供邮箱密码，依次填写即可：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">heroku login -i</span></span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">heroku: Enter your login credentials</span><br><span class="line">Email: your.email.here@gmail.com</span><br><span class="line">Password: *************</span><br><span class="line">Logged in as your.email.here@gmail.com</span><br></pre></td></tr></table></figure><p>至此，我们的准备工作就已经全部完成了，下面就来部署我们的第一个应用：</p><h3 id="部署第一个应用"><a href="#部署第一个应用" class="headerlink" title="部署第一个应用"></a>部署第一个应用</h3><p>首先，我们先准备要部署的应用，在终端中执行如下命令来拉取项目（这个项目是 heroku 提供的 node 部署示例 ）：</p><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/heroku/node-js-getting-started.git</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> node-js-getting-started</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm start</span></span><br></pre></td></tr></table></figure><h4 id="创建的应用"><a href="#创建的应用" class="headerlink" title="创建的应用"></a>创建的应用</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">heroku create</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Creating app... <span class="keyword">done</span>, ⬢ xxx-xxx-xxx</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://xxx-xxx-xxx.herokuapp.com/ | https://git.heroku.com/xxx-xxx-xxx.git</span></span><br></pre></td></tr></table></figure><ul><li><p>由于我们并没有指定名称，所以随机给我们分配了一个，本文的名字叫做 xxx-xxx-xxx。你也可以指定要创建的新服务名称，如 heroku create my-first-app，但是注意这个名字不能重名，否则会提示无法创建。</p></li><li><p>在部署之前我们先简单介绍一下， heroku 拥有一个远程的 git 仓库，在执行了 create 操作后，heroku 会在远程仓库中新建一个用于我们应用的专属仓库（上面输出中就可以看到 ），想要部署的时候我们只需要 往这个远程仓库中提交代码，keroku 就会自动根据配置运行构建并部署服务。</p></li><li><p>heroku 还会自动帮我们绑定这个远程仓库，我们可以通过 git remote -v 进行查看。并且，以后这个文件夹就是我们的服务管理目录了，只需要切换到这个目录中，执行的所有 heroku 命令都会自动使用当前应用作为目标。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote -v</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">heroku  https://git.heroku.com/xxx-xxx-xxx.git (fetch) &lt;--- 就是这两个</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">heroku  https://git.heroku.com/xxx-xxx-xxx.git (push)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">origin  git@github.com:heroku/node-js-getting-started.git (fetch)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">origin  git@github.com:heroku/node-js-getting-started.git (push)</span></span><br></pre></td></tr></table></figure><blockquote><p>此时我们就可以通过 在线仪表盘 看到我们刚才创建的应用了。不过由于我们还没有上传任何代码，所以现在还无法访问服务。</p></blockquote></li></ul><h4 id="部署应用"><a href="#部署应用" class="headerlink" title="部署应用"></a>部署应用</h4><p>接下来我们就来部署应用，执行如下命令即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push heroku main</span></span><br></pre></td></tr></table></figure><blockquote><p>这里要注意推送的分支名要一致，如果你项目默认分支名为 master，这时就要把上面的 main 替换成 master。</p></blockquote><p>执行命令后我们就可以通过 remote 输出看到 heroku 执行了构建。等到上传完成后，我们的服务就已经准备好啦。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Enumerating objects: 541, <span class="keyword">done</span>.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Counting objects: 100% (541/541), <span class="keyword">done</span>.</span>   </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Delta compression using up to 8 threads</span>   </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Compressing objects: 100% (403/403), <span class="keyword">done</span>.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Writing objects: 100% (541/541), 245.22 KiB | 81.74 MiB/s, <span class="keyword">done</span>.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Total 541 (delta 102), reused 541 (delta 102), pack-reused 0</span>    </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">remote: Compressing <span class="built_in">source</span> files... <span class="keyword">done</span>.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">remote: Building <span class="built_in">source</span>:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">remote:</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">remote: -----&gt; Building on the Heroku-20 stack</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">remote: -----&gt; Determining <span class="built_in">which</span> buildpack to use <span class="keyword">for</span> this app</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">remote: -----&gt; Node.js app detected</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="comment"># ...</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">remote: -----&gt; Compressing...</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">remote:        Done: 32.8M</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">remote: -----&gt; Launching...</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">remote:        Released v3</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">remote:        https://xxx-xxx-xxx.herokuapp.com/ deployed to Heroku</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">remote:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">remote: Verifying deploy... <span class="keyword">done</span>.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">To https://git.heroku.com/xxx-xxx-xxx.git</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> * [new branch]      main -&gt; main</span></span><br></pre></td></tr></table></figure><blockquote><p>部署完成后我们只需要执行如下命令启动服务即可：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">heroku open</span></span><br></pre></td></tr></table></figure><blockquote><p>启动完成后会自动打开浏览器并访问我们的服务，这时候你应该就可以看到部署成功的网站啦：</p></blockquote><h4 id="部署完成的示例站点"><a href="#部署完成的示例站点" class="headerlink" title="部署完成的示例站点"></a>部署完成的示例站点</h4><p>是不是非常的简单，想要进行修改也很简单，我们打开 index.js，可以看到这个应用就是一个简单的 express 服务，我们新增一个 sayhello 接口并返回 hello world，修改完成后你的代码应该是这样子的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">express</span>()</span><br><span class="line">  .<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)))</span><br><span class="line">  .<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>))</span><br><span class="line">  .<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>)</span><br><span class="line">  .<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> res.<span class="title function_">render</span>(<span class="string">&#x27;pages/index&#x27;</span>))</span><br><span class="line">  .<span class="title function_">get</span>(<span class="string">&#x27;/sayhello&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> res.<span class="title function_">send</span>(<span class="string">&#x27;&lt;h1&gt;Hello World!&lt;/h1&gt;&#x27;</span>)) <span class="comment">// &lt;== 添加了这一行</span></span><br><span class="line">  .<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Listening on <span class="subst">$&#123; PORT &#125;</span>`</span>))</span><br></pre></td></tr></table></figure><blockquote><p>然后我们正常的执行 git 提交操作，如下：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add .</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;feat: sayhello&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push heroku main</span></span><br></pre></td></tr></table></figure><p>随后 heroku 就会开始编译并发布，等待发布完成后打开我们的站点，并在地址栏的末尾添加 &#x2F;sayhello，就可以看到我们的修改了的内容</p><h4 id="heroku-的构建与发布"><a href="#heroku-的构建与发布" class="headerlink" title="heroku 的构建与发布"></a>heroku 的构建与发布</h4><blockquote><p>当我们的 git 项目根目录下存在 package.json 文件时，heroku 就会认为这是一个 node 项目。如下：</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node-js-getting-started&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.3.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">&quot;engines&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;14.x&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ejs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.1.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;express&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.17.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>可以看到其中包含了一个 engines 字段，heroku 将会使用对应的 node 版本对项目执行 <code>npm install</code> 来安装所需的依赖。安装完成后，heroku 会访问根目录中的 Procfile 来确定要执行什么命令来启动服务。你应该可以在项目根目录下找到如下内容的 Procfile：</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">web<span class="punctuation">:</span> npm start</span><br></pre></td></tr></table></figure><blockquote><p>它的意思是启动一个 web 进程，进程的服务启动命令为 npm start。注意这里的 web 很重要，它是一个固定的进程类型，当 heroku 识别到该类型时，它会把站点的 HTTP 流量 重定向到我们启动的服务进程中。heroku 还支持其他几种进程类型，你可以在 这里 找到它们。</p></blockquote><hr><blockquote><p>了解完 heroku 是如何启动我们的服务之后，我们来看一下当前服务运行的怎么样，在终端中输入 heroku ps 来进行查看：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">heroku ps <span class="comment"># 或者 heroku ps -a 你的应用名</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Free dyno hours quota remaining this month: 474h 57m (86%)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Free dyno usage <span class="keyword">for</span> this app: 0h 0m (0%)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">For more information on dyno sleeping and how to upgrade, see:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://devcenter.heroku.com/articles/dyno-sleeping</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># === web (Free): npm start (1)</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">web.1: up 2022/03/08 13:35:27 +0000 (~ 56m ago)</span></span><br></pre></td></tr></table></figure><blockquote><p>输出内容的第一句话就告诉我们了 本月剩余的可用额度还有多少，可以看到我们现在还剩下 550 小时（100%），当我们的服务在响应请求时，额度就会被消耗，而当额度用完之后，我们的服务就会被强制关闭直到下个月才能重新恢复。你可以选择 绑定你的信用卡 来将免费额度提升至 1000 小时（具体数值见官网）。</p></blockquote><blockquote><p>这里我们会接触到一个新名词：dyno，这个其实就是 heroku 自己的服务器容器，你可以将其简单理解成 docker 中的 container。下面是 heroku 自己对 dyno 的说明，你可以在 <a href="https://devcenter.heroku.com/articles/dynos#cli-commands-for-dyno-management">这里</a> 找到它的完整介绍。</p></blockquote><hr><p>我们可以通过命令来直接操作 dyno，例如当我们想要停止服务，就可以通过如下命令来“缩放” dyno 的数量，关闭之后该服务将不会继续消耗额度 ：</p><blockquote><p>把该应用的 web dyno 容器数量设置为 0</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">heroku ps:scale web=0</span></span><br></pre></td></tr></table></figure><blockquote><p>实际上，我们刚才执行 heroku open 时，heroku 就会自动帮我们启动一个免费的 dyno 容器，这个操作等同于手动执行了 <code>heroku ps:scale web=1。</code></p></blockquote><blockquote><p>还有一件事，由于我们是免费账户，所以 每个服务只能最大只能启动一个 dyno 提供服务。并且，当一个 dyno 容器超过半个小时都没有收到新请求时，他就会被销毁。不过不用担心，如果有新请求时容器会被自动重启，重启时会有几秒钟的延迟。不过对于我们的 web 后端服务来说，这并不会造成什么影响。</p></blockquote><h3 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h3><blockquote><p>除了上面介绍的命令外，heroku 还有下列常用命令：</p></blockquote><ul><li><p>查看启动的服务日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heroku logs --tail # 或者 heroku logs --tail -a 你的应用名</span><br></pre></td></tr></table></figure></li><li><p>启动可以访问到实际项目文件的控制台：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">heroku run sh <span class="comment"># 或者 heroku run sh -a 你的应用名</span></span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> heroku </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装使用教程，以及常用命令!</title>
      <link href="/2022/01/04/docker-docs/"/>
      <url>/2022/01/04/docker-docs/</url>
      
        <content type="html"><![CDATA[<h3 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h3><ul><li>一键安装脚本！Linux系统都支持！<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure></li><li>国内阿里云镜像<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure></li><li>Azure源(中国区azure)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror AzureChinaCloud</span><br></pre></td></tr></table></figure></li></ul><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><ul><li>启动Docker<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure></li><li>开机启动<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux修改时区</title>
      <link href="/2022/01/01/linux_data/"/>
      <url>/2022/01/01/linux_data/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Asia/shanghai&quot;</span> &gt; /etc/timezone</span><br><span class="line"><span class="built_in">cp</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wallpaper</title>
      <link href="/2022/01/01/wallpaper/"/>
      <url>/2022/01/01/wallpaper/</url>
      
        <content type="html"><![CDATA[<h3 id="收藏的一些壁纸"><a href="#收藏的一些壁纸" class="headerlink" title="收藏的一些壁纸"></a>收藏的一些壁纸</h3><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">壁纸</div>  <p>收藏的一些壁纸</p>  <a href='/gallery/bing/'></a>  </figcaption>  </figure>  </div>]]></content>
      
      
      
        <tags>
            
            <tag> bing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程环境和软件设施安装</title>
      <link href="/2022/01/01/install_tool/"/>
      <url>/2022/01/01/install_tool/</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS-Liunx-7-更换为阿里云的源"><a href="#CentOS-Liunx-7-更换为阿里云的源" class="headerlink" title="CentOS Liunx 7 更换为阿里云的源"></a>CentOS Liunx 7 更换为阿里云的源</h1><h3 id="1、备份"><a href="#1、备份" class="headerlink" title="1、备份"></a>1、备份</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv <span class="regexp">/etc/yum</span>.repos.d<span class="regexp">/CentOS-Base.repo /</span>etc<span class="regexp">/yum.repos.d/</span>CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure><h3 id="2-下载新的-CentOS-Base-repo-到-x2F-etc-x2F-yum-repos-d-x2F"><a href="#2-下载新的-CentOS-Base-repo-到-x2F-etc-x2F-yum-repos-d-x2F" class="headerlink" title="2. 下载新的 CentOS-Base.repo 到 &#x2F;etc&#x2F;yum.repos.d&#x2F;"></a>2. 下载新的 CentOS-Base.repo 到 &#x2F;etc&#x2F;yum.repos.d&#x2F;</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget -O <span class="regexp">/etc/yum</span>.repos.d<span class="regexp">/CentOS-Base.repo https:/</span><span class="regexp">/mirrors.aliyun.com/</span>repo/Centos-<span class="number">7</span>.repo</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-运行-yum-makecache-生成缓存"><a href="#3-运行-yum-makecache-生成缓存" class="headerlink" title="3. 运行 yum makecache 生成缓存"></a>3. 运行 yum makecache 生成缓存</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@localhost</span> ~]<span class="meta"># yum makecache</span></span><br></pre></td></tr></table></figure><h1 id="GIT⼯具安装"><a href="#GIT⼯具安装" class="headerlink" title="GIT⼯具安装"></a>GIT⼯具安装</h1><h3 id="⽅式⼀：通过包管理器安装"><a href="#⽅式⼀：通过包管理器安装" class="headerlink" title="⽅式⼀：通过包管理器安装"></a>⽅式⼀：通过包管理器安装</h3><p>在<code>Linux</code>上安装<code> Git</code> 向来仅需⼀⾏命令即可搞定，因为各式各样的包管理器帮了我们⼤忙，所以对于 <code>CentOS </code>系统来讲，直接执⾏如下命令即可安装：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> git</span><br></pre></td></tr></table></figure><p>当然通过这种⽅式安装的 <code>Git </code>可能不是较新版的<code>Git</code>，以我们的实验环境 <code>CentOS 7.8</code> 来说，这种⽅ 式安装的 <code>Git</code> 版本为 <code>1.8.3.1</code> ，不过⼀般来说是够⽤的。</p><h3 id="⽅法⼆：通过源码编译安装"><a href="#⽅法⼆：通过源码编译安装" class="headerlink" title="⽅法⼆：通过源码编译安装"></a>⽅法⼆：通过源码编译安装</h3><p>如果想安装较新版本的<code> Git</code> ，则需要⾃⾏下载 <code>Git</code> 源码来编译安装。</p><p>地址：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/git/gi</span>t/releases</span><br></pre></td></tr></table></figure><h3 id="1、准备Git安装包"><a href="#1、准备Git安装包" class="headerlink" title="1、准备Git安装包"></a>1、准备Git安装包</h3><p>我这⾥选择安装的是 <code>git-2.27.0</code> 版，将下载好的安装包 <code>git-2.27.0.tar.gz</code> 直接放在了 root ⽬录下<br>然后将其本地解压，得到 <code>git-2.27.0</code> ⽬录：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@localhost</span> ~]<span class="meta"># tar -zxvf git-2.27.0.tar.gz </span></span><br></pre></td></tr></table></figure><h3 id="2、提前安装可能所需的依赖"><a href="#2、提前安装可能所需的依赖" class="headerlink" title="2、提前安装可能所需的依赖"></a>2、提前安装可能所需的依赖</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum install curl-devel expat-devel gettext-devel openssl-devel zlibdevel gcc-c++ perl-ExtUtils-MakeMaker</span></span><br></pre></td></tr></table></figure><h3 id="3、编译安装Git"><a href="#3、编译安装Git" class="headerlink" title="3、编译安装Git"></a>3、编译安装Git</h3><p>进⼊到对应⽬录，执⾏配置、编译、安装命令即可，如下所示：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@localhost</span> ~]<span class="meta"># cd git-2.27.0</span></span><br><span class="line">[root<span class="symbol">@localhost</span> git<span class="number">-2.27</span><span class="number">.0</span>]<span class="meta"># make configure</span></span><br><span class="line">[root<span class="symbol">@localhost</span> git<span class="number">-2.27</span><span class="number">.0</span>]<span class="meta"># ./configure --prefix=/usr/local/git</span></span><br><span class="line">[root<span class="symbol">@localhost</span> git<span class="number">-2.27</span><span class="number">.0</span>]<span class="meta"># make profix=/usr/local/git</span></span><br><span class="line">[root<span class="symbol">@localhost</span> git<span class="number">-2.27</span><span class="number">.0</span>]<span class="meta"># make install</span></span><br></pre></td></tr></table></figure><h3 id="4、将Git加⼊环境变量"><a href="#4、将Git加⼊环境变量" class="headerlink" title="4、将Git加⼊环境变量"></a>4、将Git加⼊环境变量</h3><p>将 <code>Git </code>的可执⾏程序加⼊环境变量，便于后续使⽤</p><p>编辑配置⽂件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>profile</span><br></pre></td></tr></table></figure><p>尾部加⼊<code> Git</code> 的<code> bin</code> 路径配置即可</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="attribute">GIT_HOME</span>=/usr/local/git </span><br><span class="line"><span class="built_in">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$GIT_HOME/bin</span><br></pre></td></tr></table></figure><p>最后执⾏ <code>source /etc/profile</code> 使环境变量⽣效即可。</p><h3 id="5、查看安装结果"><a href="#5、查看安装结果" class="headerlink" title="5、查看安装结果"></a>5、查看安装结果</h3><p>执⾏ <code>git --version</code> 查看安装后的版本即可</p><h1 id="JDK（JAVA环境）安装"><a href="#JDK（JAVA环境）安装" class="headerlink" title="JDK（JAVA环境）安装"></a>JDK（JAVA环境）安装</h1><blockquote><p>注意：这⾥安装的是Oracle JDK</p></blockquote><h3 id="准备JDK安装包"><a href="#准备JDK安装包" class="headerlink" title="准备JDK安装包"></a>准备JDK安装包</h3><ul><li><p>我这⾥下载的是 <code>jdk-8u261-linux-x64.tar.gz</code> 安装包，并将其直接放在了 root ⽬录下</p></li><li><p>卸载已有的<code>OPENJDK</code>（如果有）</p></li><li><p>如果系统⾃带有 <code>OpenJDK</code> ，可以按照如下步骤提前卸载之。</p></li><li><p>⾸先查找已经安装的 <code>OpenJDK</code> 包：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@localhost</span> ~]<span class="meta"># rpm -qa | grep java</span></span><br></pre></td></tr></table></figure></li><li><p>如果有，接下来可以将 java 开头的安装包均卸载即可：</p></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum -y <span class="built_in">remove</span> javapackages-tools-3.4.1-11.el7.noarch</span><br><span class="line">[root@localhost ~]# yum -y <span class="built_in">remove</span> java-1.8.0-openjdk-headless-1.8.0.222.b03-1.el7.x86_64</span><br><span class="line">yum -y <span class="built_in">remove</span> <span class="built_in">..</span><span class="built_in">..</span>.</span><br></pre></td></tr></table></figure><h3 id="创建⽬录并解压"><a href="#创建⽬录并解压" class="headerlink" title="创建⽬录并解压"></a>创建⽬录并解压</h3><p>1、在 /usr/local/ 下创建 java ⽂件夹并进⼊<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/</span><br><span class="line"><span class="built_in">mkdir</span> java </span><br><span class="line"><span class="built_in">cd</span> java</span><br></pre></td></tr></table></figure><p>2、将上⾯准备好的 JDK 安装包解压到 /usr/local/java 中即可<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf <span class="regexp">/root/</span>jdk-<span class="number">8</span>u261-linux-x64.tar.gz -C ./</span><br></pre></td></tr></table></figure><p>解压完之后， /usr/local/java ⽬录中会出现⼀个 jdk1.8.0_261 的⽬录<h3 id="配置JDK环境变量"><a href="#配置JDK环境变量" class="headerlink" title="配置JDK环境变量"></a>配置JDK环境变量</h3><ul><li>编辑 <code>/etc/profile </code>⽂件，在⽂件尾部加⼊如下 JDK 环境配置即可</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">JAVA_HOME</span>=/usr/local/java/jdk1.8.0_261</span><br><span class="line"><span class="attribute">CLASSPATH</span>=<span class="variable">$JAVA_HOME</span>/lib/ </span><br><span class="line"><span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$JAVA_HOME/bin </span><br><span class="line"><span class="built_in">export</span> PATH JAVA_HOME CLASSPATH</span><br></pre></td></tr></table></figure><ul><li>然后执⾏如下命令让环境变量⽣效</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">source</span> <span class="regexp">/etc/</span>profile</span><br></pre></td></tr></table></figure><h3 id="验证JDK安装结果"><a href="#验证JDK安装结果" class="headerlink" title="验证JDK安装结果"></a>验证JDK安装结果</h3><ul><li>输⼊如下命令即可检查安装结果：</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -<span class="built_in">version</span></span><br><span class="line">javac</span><br></pre></td></tr></table></figure><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="meta">@localhost</span> ~]<span class="comment"># java -version</span></span><br><span class="line">java version <span class="string">&quot;1.8.0_261&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_261-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.261-b12, mixed mode)</span><br><span class="line">[root<span class="meta">@localhost</span> ~]<span class="comment"># javac</span></span><br><span class="line">用法: javac <span class="variable">&lt;options&gt;</span> <span class="variable">&lt;source files&gt;</span></span><br><span class="line">其中, 可能的选项包括:</span><br><span class="line">  -g                         生成所有调试信息</span><br><span class="line">  -g:none                    不生成任何调试信息</span><br><span class="line">  -g:&#123;lines,vars,source&#125;     只生成某些调试信息</span><br><span class="line">  -nowarn                    不生成任何警告</span><br><span class="line">  -verbose                   输出有关编译器正在执行的操作的消息</span><br><span class="line">  -deprecation               输出使用已过时的 API 的源位置</span><br><span class="line">  -classpath <span class="variable">&lt;路径&gt;</span>            指定查找用户类文件和注释处理程序的位置</span><br><span class="line">  -cp <span class="variable">&lt;路径&gt;</span>                   指定查找用户类文件和注释处理程序的位置</span><br><span class="line">  -sourcepath <span class="variable">&lt;路径&gt;</span>           指定查找输入源文件的位置</span><br><span class="line">  -bootclasspath <span class="variable">&lt;路径&gt;</span>        覆盖引导类文件的位置</span><br><span class="line">  -extdirs <span class="variable">&lt;目录&gt;</span>              覆盖所安装扩展的位置</span><br><span class="line">  -endorseddirs <span class="variable">&lt;目录&gt;</span>         覆盖签名的标准路径的位置</span><br><span class="line">  -proc:&#123;none,only&#125;          控制是否执行注释处理和/或编译。</span><br><span class="line">  -processor <span class="variable">&lt;class1&gt;</span>[,<span class="variable">&lt;class2&gt;</span>,<span class="variable">&lt;class3&gt;</span>...] 要运行的注释处理程序的名称; 绕过默认的搜索进程</span><br><span class="line">  -processorpath <span class="variable">&lt;路径&gt;</span>        指定查找注释处理程序的位置</span><br><span class="line">  -parameters                生成元数据以用于方法参数的反射</span><br><span class="line">  -d <span class="variable">&lt;目录&gt;</span>                    指定放置生成的类文件的位置</span><br><span class="line">  -s <span class="variable">&lt;目录&gt;</span>                    指定放置生成的源文件的位置</span><br><span class="line">  -h <span class="variable">&lt;目录&gt;</span>                    指定放置生成的本机标头文件的位置</span><br><span class="line">  -implicit:&#123;none,class&#125;     指定是否为隐式引用文件生成类文件</span><br><span class="line">  -encoding <span class="variable">&lt;编码&gt;</span>             指定源文件使用的字符编码</span><br><span class="line">  -source <span class="variable">&lt;发行版&gt;</span>              提供与指定发行版的源兼容性</span><br><span class="line">  -target <span class="variable">&lt;发行版&gt;</span>              生成特定 VM 版本的类文件</span><br><span class="line">  -profile <span class="variable">&lt;配置文件&gt;</span>            请确保使用的 API 在指定的配置文件中可用</span><br><span class="line">  -version                   版本信息</span><br><span class="line">  -help                      输出标准选项的提要</span><br><span class="line">  -A关键字[=值]                  传递给注释处理程序的选项</span><br><span class="line">  -X                         输出非标准选项的提要</span><br><span class="line">  -J<span class="variable">&lt;标记&gt;</span>                     直接将 <span class="variable">&lt;标记&gt;</span> 传递给运行时系统</span><br><span class="line">  -Werror                    出现警告时终止编译</span><br><span class="line">  <span class="meta">@&lt;文件名&gt;</span>                     从文件读取选项和文件名</span><br><span class="line"></span><br><span class="line">[root<span class="meta">@localhost</span> ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><h1 id="node环境安装"><a href="#node环境安装" class="headerlink" title="node环境安装"></a>node环境安装</h1><ul><li>我这⾥下载的是 <code>node-v12.18.2-linux-x64.tar.xz</code> 安装包，并将其直接放在了<code>root</code>⽬录下</li></ul><h3 id="创建⽬录并解压-1"><a href="#创建⽬录并解压-1" class="headerlink" title="创建⽬录并解压"></a>创建⽬录并解压</h3><ul><li>1、在 &#x2F;usr&#x2F;local&#x2F; 下创建 node ⽂件夹并进⼊</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/ </span><br><span class="line">mkdir <span class="keyword">node</span> </span><br><span class="line"><span class="title">cd</span> <span class="keyword">node</span><span class="title"></span></span><br></pre></td></tr></table></figure><ul><li>2、将 <code>Node</code> 的安装包解压到<code> /usr/local/node</code> 中即可</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost <span class="keyword">node</span><span class="title">]# tar</span> -xJvf /root/<span class="keyword">node</span><span class="title">-v12</span>.<span class="number">18.2</span>-linux-x64.tar.xz -C ./</span><br></pre></td></tr></table></figure><p>解压完之后， /usr/local/node ⽬录中会出现⼀个 node-v12.18.2-linux-x64 的⽬录<h3 id="配置node系统环境变量"><a href="#配置node系统环境变量" class="headerlink" title="配置node系统环境变量"></a>配置node系统环境变量</h3><ul><li>编辑 <code>~/.bash_profile</code> ⽂件，在⽂件末尾追加如下信息:</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Nodejs</span></span><br><span class="line">export PATH=<span class="regexp">/usr/</span>local<span class="regexp">/node/</span>node-v12.<span class="number">18.2</span>-linux-x64/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><img src="http://im.tryxd.cn/200721/node.png" alt="node.png" title="node.png" /><ul><li>刷新环境变量，使之⽣效即可</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><h3 id="检查安装结果"><a href="#检查安装结果" class="headerlink" title="检查安装结果"></a>检查安装结果</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">-v</span></span><br><span class="line">npm -v</span><br><span class="line">npx -v</span><br></pre></td></tr></table></figure><ul><li>均有版本信息输出即可：</li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@localhost</span> ~]<span class="meta"># node -v</span></span><br><span class="line">v12<span class="number">.18</span><span class="number">.2</span></span><br><span class="line">[root<span class="symbol">@localhost</span> ~]<span class="meta"># npm -v</span></span><br><span class="line"><span class="number">6.14</span><span class="number">.5</span></span><br><span class="line">[root<span class="symbol">@localhost</span> ~]<span class="meta"># npx -v</span></span><br><span class="line"><span class="number">6.14</span><span class="number">.5</span></span><br><span class="line">[root<span class="symbol">@localhost</span> ~]<span class="meta"># </span></span><br></pre></td></tr></table></figure><h1 id="PYTHON环境安装"><a href="#PYTHON环境安装" class="headerlink" title="PYTHON环境安装"></a>PYTHON环境安装</h1><ul><li><code>CentOS 7.7 </code>默认⾃带了⼀个 <code>Python2.7</code> 环境：</li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@localhost</span> ~]<span class="meta"># python -V</span></span><br><span class="line">Python <span class="number">2.7</span><span class="number">.5</span></span><br><span class="line">[root<span class="symbol">@localhost</span> ~]<span class="meta">#</span></span><br></pre></td></tr></table></figure><ul><li>然⽽现在主流都是 Python3 ，所以接下来再装⼀个 Python3 ，打造⼀个共存的环境</li></ul><h3 id="准备PYTHON3安装包并解压"><a href="#准备PYTHON3安装包并解压" class="headerlink" title="准备PYTHON3安装包并解压"></a>准备PYTHON3安装包并解压</h3><ul><li><p>我这⾥下载的是 <a href="https://www.python.org/downloads/source/">Python-3.8.5.tgz</a>安装包，并将其直接放在了 <code>/root </code>⽬录下</p></li><li><p>执⾏如下命令解压之：</p></li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">tar</span> zxvf Python-<span class="number">3</span>.<span class="number">8</span>.<span class="number">5</span>.tgz</span><br></pre></td></tr></table></figure><ul><li>则可以在当前⽬录得到⽂件夹：<code> Python-3.8.5</code></li></ul><h3 id="安装相关预备环境"><a href="#安装相关预备环境" class="headerlink" title="安装相关预备环境"></a>安装相关预备环境</h3><ul><li>直接执⾏如下命令即可：</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install </span>zlib-devel <span class="keyword">bzip2-devel </span>openssl-devel ncurses-devel sqlitedevel readline-devel tk-devel gcc make</span><br></pre></td></tr></table></figure><h3 id="编译并安装"><a href="#编译并安装" class="headerlink" title="编译并安装"></a>编译并安装</h3><ul><li>这⾥指定了安装⽬录为 <code>/usr/local/python3</code> ，有需要可以⾃定义</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd Python-<span class="number">3.8</span>.<span class="number">5</span>/ </span><br><span class="line">.<span class="regexp">/configure prefix=/u</span>sr<span class="regexp">/local/</span>python3 </span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><ul><li>等安装过程完毕， <code>/usr/local/python3</code> ⽬录就会⽣成了</li></ul><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><h4 id="方法一添加软链接"><a href="#方法一添加软链接" class="headerlink" title="方法一添加软链接"></a>方法一添加软链接</h4><ul><li>我们还需要将刚刚安装⽣成的⽬录 <code>/usr/local/python3</code> ⾥的 <code>python3 </code>可执⾏⽂件做⼀份软链接，链 接到 <code>/usr/bin</code> 下，⽅便后续使⽤<code>python3</code></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s <span class="regexp">/usr/</span>local<span class="regexp">/python3/</span>bin<span class="regexp">/python3 /u</span>sr<span class="regexp">/bin/</span>python3 </span><br><span class="line">ln -s <span class="regexp">/usr/</span>local<span class="regexp">/python3/</span>bin<span class="regexp">/pip3 /u</span>sr<span class="regexp">/bin/</span>pip3</span><br></pre></td></tr></table></figure><h4 id="方法二全局配置"><a href="#方法二全局配置" class="headerlink" title="方法二全局配置"></a>方法二全局配置</h4><ul><li>编辑 &#x2F;etc&#x2F;profile⽂件，在⽂件尾部加⼊如下环境配置即可<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">PATH</span>=<span class="variable">$PATH</span><span class="symbol">:/usr/local/python3/bin</span></span><br></pre></td></tr></table></figure></li><li>然后执⾏如下命令让环境变量⽣效<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">source</span> <span class="regexp">/etc/</span>profile</span><br></pre></td></tr></table></figure></li></ul><h3 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h3><ul><li><p>命令⾏输⼊<code> python3</code> ，即可查看 <code>Python3</code> 版本的安装结果</p></li><li><p>⽽输⼊ python ，依然还是 python2.7.5 环境</p></li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@localhost</span> ~]<span class="meta"># python -V</span></span><br><span class="line">Python <span class="number">2.7</span><span class="number">.5</span></span><br><span class="line">[root<span class="symbol">@localhost</span> ~]<span class="meta"># python3 -V</span></span><br><span class="line">Python <span class="number">3.8</span><span class="number">.5</span></span><br></pre></td></tr></table></figure><h1 id="MAVEN项⽬构建和管理⼯具安装"><a href="#MAVEN项⽬构建和管理⼯具安装" class="headerlink" title="MAVEN项⽬构建和管理⼯具安装"></a>MAVEN项⽬构建和管理⼯具安装</h1><ul><li><p>这⾥下载的是 <code>apache-maven-3.6.3-bin.tar.gz</code> 安装包，并将其放置于提前创建好的 <code>/opt/maven</code> ⽬录下。</p></li><li><p>执⾏命令解压之：</p></li><li><p>即可在当前⽬录得到 &#x2F;opt&#x2F;maven&#x2F;apache-maven-3.6.3 ⽬录</p></li></ul><h3 id="配置MAVEN加速镜像源"><a href="#配置MAVEN加速镜像源" class="headerlink" title="配置MAVEN加速镜像源"></a>配置MAVEN加速镜像源</h3><ul><li>这⾥配置的是阿⾥云的maven镜像源。<br>编辑修改 <code>/opt/maven/apache-maven-3.6.3/conf/settings.xml </code>⽂件，在 <code>&lt;mirrors&gt;&lt;/mirrors&gt;</code> 标签对⾥添加如下内容即可：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><ul><li>因为下载的是⼆进制版安装包，所以解压完，配置好环境变量即可使⽤了。</li><li>编辑修改 <code>/etc/profile </code>⽂件，在⽂件尾部添加如下内容，配置 <code>maven </code>的安装路径</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="attribute">MAVEN_HOME</span>=/opt/maven/apache-maven-3.6.3 <span class="built_in">export</span> <span class="attribute">PATH</span>=<span class="variable">$MAVEN_HOME</span>/bin:$PATH</span><br></pre></td></tr></table></figure><ul><li>接下来执⾏ source &#x2F;etc&#x2F;profile 来刷新环境变量，让 maven 环境的路径配置⽣效，</li></ul><h3 id="检验安装结果"><a href="#检验安装结果" class="headerlink" title="检验安装结果"></a>检验安装结果</h3><ul><li>执⾏ mvn –v ，能打印出 maven 版本信息说明安装、配置成功：</li></ul><img src="http://im.tryxd.cn/200722/mvn.png" alt="mvn.png" title="mvn.png" /><h1 id="MYSQL数据库部署和安装"><a href="#MYSQL数据库部署和安装" class="headerlink" title="MYSQL数据库部署和安装"></a>MYSQL数据库部署和安装</h1><h3 id="⾸先准备安装包"><a href="#⾸先准备安装包" class="headerlink" title="⾸先准备安装包"></a>⾸先准备安装包</h3><p>这⾥下载的是 <code>mysql-5.7.30-linux-glibc2.12-x86_64.tar.gz</code> 安装包，并将其直接放在了 <code>root </code>⽬录下,地址：<code>http://mirrors.163.com/mysql/Downloads/MySQL-5.7/mysql-5.7.30-linux-glibc2.12-x86_64.tar.gz</code></p><h3 id="卸载系统⾃带的MARIADB（如果有）"><a href="#卸载系统⾃带的MARIADB（如果有）" class="headerlink" title="卸载系统⾃带的MARIADB（如果有）"></a>卸载系统⾃带的MARIADB（如果有）</h3><ul><li><p>如果系统之前⾃带 <code>Mariadb</code> ，可以先卸载之。</p></li><li><p>⾸先查询已安装的 <code>Mariadb</code> 安装包：</p></li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -<span class="keyword">qa</span>|<span class="keyword">grep</span> mariadb</span><br></pre></td></tr></table></figure><img src="http://im.tryxd.cn/200722/mariadb.png" alt="mariadb.png" title="mariadb.png" /><ul><li>将其均卸载之：</li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@localhost</span> ~]<span class="meta"># yum -y remove mariadb-libs-5.5.64-1.el7.x86_64</span></span><br></pre></td></tr></table></figure><h3 id="解压MYSQL安装包"><a href="#解压MYSQL安装包" class="headerlink" title="解压MYSQL安装包"></a>解压MYSQL安装包</h3><p>将上⾯准备好的 <code>MySQL</code> 安装包解压到 <code>/usr/local/ </code>⽬录，并重命名为 <code>mysql</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">tar</span> -zxvf /root/mysql-<span class="number">5</span>.<span class="number">7</span>.<span class="number">30</span>-linux-glibc2.<span class="number">12</span>-x86_64.tar.gz -C /usr/local/ </span><br><span class="line"><span class="attribute">mv</span> mysql-<span class="number">5</span>.<span class="number">7</span>.<span class="number">30</span>-linux-glibc2.<span class="number">12</span>-x86_64 mysql</span><br></pre></td></tr></table></figure><h3 id="创建MYSQL⽤户和⽤户组"><a href="#创建MYSQL⽤户和⽤户组" class="headerlink" title="创建MYSQL⽤户和⽤户组"></a>创建MYSQL⽤户和⽤户组</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">groupadd mysql </span></span><br><span class="line"><span class="attribute">useradd -g mysql mysql</span></span><br></pre></td></tr></table></figure><p>同时新建 <code>/usr/local/mysql/data</code> ⽬录，后续备⽤</p><p>修改MYSQL⽬录的归属⽤户 </p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@localhost</span> mysql]<span class="meta"># chown -R mysql:mysql ./</span></span><br></pre></td></tr></table></figure><h3 id="准备MYSQL的配置⽂件"><a href="#准备MYSQL的配置⽂件" class="headerlink" title="准备MYSQL的配置⽂件"></a>准备MYSQL的配置⽂件</h3><p>在 <code>/etc</code> ⽬录下新建 <code>my.cnf </code>⽂件</p><ul><li>写⼊如下简化配置：</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[mysql] </span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集 </span></span><br><span class="line"><span class="attribute">default-character-set</span>=utf8 </span><br><span class="line"><span class="attribute">socket</span>=/var/lib/mysql/mysql.sock</span><br><span class="line">[mysqld] </span><br><span class="line">skip-name-resolve </span><br><span class="line"><span class="comment">#设置3306端⼝ </span><span class="built_in"></span></span><br><span class="line"><span class="built_in">port </span>= 3306 </span><br><span class="line"><span class="attribute">socket</span>=/var/lib/mysql/mysql.sock</span><br><span class="line"><span class="comment"># 设置mysql的安装⽬录</span></span><br><span class="line"><span class="attribute">basedir</span>=/usr/local/mysql</span><br><span class="line"><span class="comment"># 设置mysql数据库的数据的存放⽬录 </span></span><br><span class="line"><span class="attribute">datadir</span>=/usr/local/mysql/data </span><br><span class="line"><span class="comment"># 允许最⼤连接数 </span></span><br><span class="line"><span class="attribute">max_connections</span>=200 </span><br><span class="line"><span class="comment"># 服务端使⽤的字符集默认为8⽐特编码的latin1字符集 </span></span><br><span class="line"><span class="attribute">character-set-server</span>=utf8 </span><br><span class="line"><span class="comment"># 创建新表时将使⽤的默认存储引擎 </span></span><br><span class="line"><span class="attribute">default-storage-engine</span>=INNODB</span><br><span class="line"><span class="comment">#lower_case_table_names=1 max_allowed_packet=16M</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>同时使⽤如下命令创建 <code>/var/lib/mysql </code>⽬录，并修改权限：</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir <span class="regexp">/var/</span>lib/mysql </span><br><span class="line">chmod <span class="number">777</span> <span class="regexp">/var/</span>lib/mysql</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="正式开始安装MYSQL"><a href="#正式开始安装MYSQL" class="headerlink" title="正式开始安装MYSQL"></a>正式开始安装MYSQL</h3><ul><li>执⾏如下命令正式开始安装：</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd <span class="regexp">/usr/</span>local/mysql</span><br><span class="line">.<span class="regexp">/bin/my</span>sqld --initialize --user=mysql --basedir=<span class="regexp">/usr/</span>local<span class="regexp">/mysql --datadir=/u</span>sr<span class="regexp">/local/my</span>sql/data</span><br></pre></td></tr></table></figure><img src="http://im.tryxd.cn/200722/mysql.png" alt="mysql.png" title="mysql.png" /><blockquote><p>注意：记住上⾯打印出来的 root 的密码，后⾯⾸次登陆需要使⽤</p></blockquote><h3 id="复制启动脚本到资源⽬录"><a href="#复制启动脚本到资源⽬录" class="headerlink" title="复制启动脚本到资源⽬录"></a>复制启动脚本到资源⽬录</h3><ul><li>执⾏如下命令复制：</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost mysql]# cp .<span class="regexp">/support-files/my</span>sql.server <span class="regexp">/etc/i</span>nit.d/mysqld</span><br></pre></td></tr></table></figure><ul><li>并修改 <code>/etc/init.d/mysqld </code>，修改其 <code>basedir </code>和 <code>datadir </code>为实际对应⽬录：</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">basedir=<span class="regexp">/usr/</span>local/mysql </span><br><span class="line">datadir=<span class="regexp">/usr/</span>local<span class="regexp">/mysql/</span>data</span><br></pre></td></tr></table></figure><h3 id="设置MYSQL系统服务并开启⾃启"><a href="#设置MYSQL系统服务并开启⾃启" class="headerlink" title="设置MYSQL系统服务并开启⾃启"></a>设置MYSQL系统服务并开启⾃启</h3><p>⾸先增加 <code>mysqld</code> 服务控制脚本执⾏权限：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x <span class="regexp">/etc/i</span>nit.d/mysqld</span><br></pre></td></tr></table></figure><p>同时将 <code>mysqld</code> 服务加⼊到系统服务：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --<span class="built_in">add</span> mysqld</span><br></pre></td></tr></table></figure><p>最后检查 <code>mysqld</code> 服务是否已经⽣效即可：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig <span class="comment">--list mysqld</span></span><br></pre></td></tr></table></figure><img src="http://im.tryxd.cn/200722/mysqld.png" alt="mysqld.png" title="mysqld.png" /><blockquote><p>这样就表明 mysqld 服务已经⽣效了，在2、3、4、5运⾏级别随系统启动⽽⾃动启动，以后可以直接使 ⽤ service 命令控制 mysql 的启停。</p></blockquote><h3 id="启动MYSQLD"><a href="#启动MYSQLD" class="headerlink" title="启动MYSQLD"></a>启动MYSQLD</h3><ul><li>直接执⾏：</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld <span class="literal">start</span></span><br></pre></td></tr></table></figure><h3 id="将-MYSQL-的-BIN-⽬录加⼊-PATH-环境变量"><a href="#将-MYSQL-的-BIN-⽬录加⼊-PATH-环境变量" class="headerlink" title="将 MYSQL 的 BIN ⽬录加⼊ PATH 环境变量"></a>将 MYSQL 的 BIN ⽬录加⼊ PATH 环境变量</h3><p>这样⽅便以后在任意⽬录上都可以使⽤ mysql 提供的命令。<p>编辑 ~/.bash_profile ⽂件，在⽂件末尾处追加如下信息:<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export <span class="title class_">PATH</span>=<span class="variable">$PATH</span><span class="symbol">:/usr/local/mysql/bin</span></span><br></pre></td></tr></table></figure><ul><li>最后执⾏如下命令使环境变量⽣效</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><h3 id="⾸次登陆MYSQL"><a href="#⾸次登陆MYSQL" class="headerlink" title="⾸次登陆MYSQL"></a>⾸次登陆MYSQL</h3><ul><li>以 root 账户登录 mysql ，使⽤上⽂安装完成提示的密码进⾏登⼊</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -<span class="selector-tag">p</span></span><br></pre></td></tr></table></figure><img src="http://im.tryxd.cn/200722/mysqlpa.png" alt="mysqlpa.png" title="mysqlpa.png" /><h3 id="接下来修改ROOT账户密码"><a href="#接下来修改ROOT账户密码" class="headerlink" title="接下来修改ROOT账户密码"></a>接下来修改ROOT账户密码</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">alter</span> <span class="keyword">user</span> <span class="keyword">user</span>() identified <span class="keyword">by</span> &quot;你的新密码&quot;;</span><br><span class="line">mysql&gt;flush <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><h3 id="设置远程主机登录"><a href="#设置远程主机登录" class="headerlink" title="设置远程主机登录"></a>设置远程主机登录</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use mysql; </span><br><span class="line">mysql&gt; <span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> <span class="keyword">user</span>.Host=<span class="string">&#x27;%&#x27;</span> <span class="keyword">where</span> <span class="keyword">user</span>.<span class="keyword">User</span>=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">mysql&gt; flush <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><blockquote><p>将Host设置为通配符%</p><p>Host列指定了允许用户登录所使用的IP，比如user&#x3D;root Host&#x3D;192.168.1.1。这里的意思就是说root用户只能通过192.168.1.1的客户端去访问。 user&#x3D;root Host&#x3D;localhost，表示只能通过本机客户端去访问。而%是个通配符，如果Host&#x3D;192.168.1.%，那么就表示只要是IP地址前缀为“192.168.1.”的客户端都可以连接。如果Host&#x3D;%，表示所有IP都有连接权限。 </p><p>注意：在生产环境下不能为了省事将host设置为%，这样做会存在安全问题，具体的设置可以根据生产环境的IP进行设置</p></blockquote><h1 id="REDIS缓存安装部署"><a href="#REDIS缓存安装部署" class="headerlink" title="REDIS缓存安装部署"></a>REDIS缓存安装部署</h1><h3 id="⾸先准备REDIS安装包"><a href="#⾸先准备REDIS安装包" class="headerlink" title="⾸先准备REDIS安装包"></a>⾸先准备REDIS安装包</h3><ul><li>这⾥下载的是 <code>redis-6.0.5.tar.gz</code> 安装包，并将其直接放在了 <code>root</code> ⽬录下</li><li>安装基本工具:</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc gcc-<span class="keyword">c</span>++ wget <span class="keyword">vim</span> net-tools <span class="keyword">nmap</span> lrasz tree <span class="keyword">make</span> <span class="keyword">tcl</span> -<span class="keyword">y</span></span><br></pre></td></tr></table></figure><h3 id="解压安装包"><a href="#解压安装包" class="headerlink" title="解压安装包"></a>解压安装包</h3><ul><li>1、在 &#x2F;usr&#x2F;local&#x2F; 下创建 redis ⽂件夹并进⼊</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/ </span><br><span class="line"><span class="built_in">mkdir</span> redis </span><br><span class="line"><span class="built_in">cd</span> redis</span><br></pre></td></tr></table></figure><ul><li>2、将 Redis 安装包解压到 &#x2F;usr&#x2F;local&#x2F;redis 中即可</li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@localhost</span> redis]<span class="meta"># tar zxvf /root/redis-6.0.5.tar.gz -C ./</span></span><br></pre></td></tr></table></figure><blockquote><p>解压完之后， <code>/usr/local/redis</code> ⽬录中会出现⼀个<code>redis-6.0.5</code>的⽬录</p></blockquote><h3 id="编译并安装-1"><a href="#编译并安装-1" class="headerlink" title="编译并安装"></a>编译并安装</h3><ul><li>CentOS7默认安装的是4.8.5，而redis6.0只支持5.3以上版本，原来是版本不支持，升级版本、升级:</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">yum</span> -y install centos-release-scl</span><br><span class="line"><span class="attribute">yum</span> -y install devtoolset-<span class="number">9</span>-gcc devtoolset-<span class="number">9</span>-gcc-c++ devtoolset-<span class="number">9</span>-binutils</span><br></pre></td></tr></table></figure><ul><li>版本的切换:</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">临时切换：scl enable devtoolset-<span class="number">9</span> bash</span><br><span class="line"></span><br><span class="line">永久切换：echo “<span class="keyword">source</span> <span class="regexp">/opt/</span>rh<span class="regexp">/devtoolset-9/</span>enable” &gt;&gt; <span class="regexp">/etc/</span>profile</span><br></pre></td></tr></table></figure><ul><li>查看gcc版本</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">gcc -v</span></span><br></pre></td></tr></table></figure><img src="http://im.tryxd.cn/200722/gcc.png" alt="gcc.png" title="gcc.png" /><ul><li>编译并安装</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cd</span> redis-<span class="number">6</span>.<span class="number">0</span>.<span class="number">5</span>/ </span><br><span class="line"><span class="attribute">make</span> &amp;&amp; make install</span><br></pre></td></tr></table></figure><img src="http://im.tryxd.cn/200722/redis.png" alt="redis.png" title="redis.png" /><h1 id="应⽤服务器TOMCAT安装部署"><a href="#应⽤服务器TOMCAT安装部署" class="headerlink" title="应⽤服务器TOMCAT安装部署"></a>应⽤服务器TOMCAT安装部署</h1><h3 id="准备安装包"><a href="#准备安装包" class="headerlink" title="准备安装包"></a>准备安装包</h3><ul><li>这⾥使⽤的是 8.5.57 版： apache-tomcat-8.5.57.tar.gz ，直接将其放在了 &#x2F;root ⽬录下</li></ul><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">https:</span>//tomcat.apache<span class="meta">.org</span>/download<span class="number">-80.</span>cgi</span><br></pre></td></tr></table></figure><h3 id="解压并安装"><a href="#解压并安装" class="headerlink" title="解压并安装"></a>解压并安装</h3><ul><li>在 &#x2F;usr&#x2F;local&#x2F; 下创建 tomcat ⽂件夹并进⼊</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/ </span><br><span class="line"><span class="built_in">mkdir</span> tomcat</span><br><span class="line"><span class="built_in">cd</span> tomcat</span><br></pre></td></tr></table></figure><ul><li>2、将 Tomcat 安装包解压到 &#x2F;usr&#x2F;local&#x2F;tomcat 中即可</li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@localhost</span> tomcat]<span class="meta"># tar -zxvf /root/apache-tomcat-8.5.57.tar.gz -C ./</span></span><br></pre></td></tr></table></figure><p>解压完之后， <code>/usr/local/tomcat</code> ⽬录中会出现⼀个<code> apache-tomcat-8.5.57</code> 的⽬录</p><h3 id="启动TOMCAT"><a href="#启动TOMCAT" class="headerlink" title="启动TOMCAT"></a>启动TOMCAT</h3><ul><li>直接进<code> apache-tomcat-8.5.57 ⽬录，执⾏其中</code> bin&#96; ⽬录下的启动脚本即可</li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@localhost</span> tomcat]<span class="meta"># cd apache-tomcat-8.5.57/</span></span><br><span class="line">[root<span class="symbol">@localhost</span> apache-tomcat<span class="number">-8.5</span><span class="number">.57</span>]<span class="meta"># cd bin/</span></span><br><span class="line">[root<span class="symbol">@localhost</span> bin]<span class="meta"># ./startup.sh </span></span><br></pre></td></tr></table></figure><img src="http://im.tryxd.cn/200722/tomcat.png" alt="tomcat.png" title="tomcat.png" /><ul><li>这时候浏览器访问： 你的主机<code>IP:8080</code> ，得到如下画⾯说明成功启动了</li></ul><img src="http://im.tryxd.cn/200722/80tomcat.png" alt="80tomcat.png" title="80tomcat.png" /><h1 id="WEB服务器NGINX安装部署"><a href="#WEB服务器NGINX安装部署" class="headerlink" title="WEB服务器NGINX安装部署"></a>WEB服务器NGINX安装部署</h1><h3 id="配置yum源"><a href="#配置yum源" class="headerlink" title="配置yum源"></a>配置yum源</h3><ul><li>编辑<code>nginx.repo</code>文件</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="regexp">/etc/yum</span>.repos.d/nginx.repo</span><br></pre></td></tr></table></figure><ul><li>把下面代码复制进去</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[nginx]</span></span><br><span class="line"><span class="attr">name</span>=nginx repo</span><br><span class="line"><span class="attr">baseurl</span>=http://nginx.org/packages/centos/<span class="number">7</span>/<span class="variable">$basearch</span>/</span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> nginx</span><br></pre></td></tr></table></figure><ul><li>检测Nginx的版本</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nginx -v</span></span><br></pre></td></tr></table></figure><ul><li>如果出现下面图片的内容，说明Nginx就安装成功了。</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># nginx -v</span></span><br><span class="line">nginx <span class="built_in">version</span>: nginx/<span class="number">1.18</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><h3 id="启动NGINX"><a href="#启动NGINX" class="headerlink" title="启动NGINX"></a>启动NGINX</h3><p>直接执⾏如下命令即可：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@localhost</span> ~]<span class="meta"># nginx</span></span><br></pre></td></tr></table></figure><p>如果想停⽌Nginx服务，可执⾏：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure><p>如果修改了配置⽂件后想重新加载Nginx，可执⾏：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nginx -s reload</span></span><br></pre></td></tr></table></figure><p>重启Nginx服务</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">restart</span> nginx.service</span><br></pre></td></tr></table></figure><p>从容停止服务</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -<span class="keyword">s</span> <span class="keyword">quit</span></span><br></pre></td></tr></table></figure><p>注意其配置⽂件位于：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>conf/nginx.conf</span><br></pre></td></tr></table></figure><h3 id="nginx-conf文件解读"><a href="#nginx-conf文件解读" class="headerlink" title="nginx.conf文件解读"></a>nginx.conf文件解读</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#运行用户，默认即是nginx，可以不进行设置</span></span><br><span class="line"><span class="attribute">user</span>  nginx;</span><br><span class="line"><span class="comment">#Nginx进程，一般设置为和CPU核数一样</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;   </span><br><span class="line"><span class="comment">#错误日志存放目录</span></span><br><span class="line"><span class="attribute">error_log</span>  /var/log/nginx/<span class="literal">error</span>.log <span class="literal">warn</span>;</span><br><span class="line"><span class="comment">#进程pid存放位置</span></span><br><span class="line"><span class="attribute">pid</span>        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>; <span class="comment"># 单个后台进程的最大并发数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       /etc/nginx/mime.types;   <span class="comment">#文件扩展名与类型映射表</span></span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;  <span class="comment">#默认文件类型</span></span><br><span class="line">    <span class="comment">#设置日志模式</span></span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">&#x27;<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] &quot;<span class="variable">$request</span>&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> &quot;<span class="variable">$http_referer</span>&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;<span class="variable">$http_user_agent</span>&quot; &quot;<span class="variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/access.log  main;   <span class="comment">#nginx访问日志存放位置</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;   <span class="comment">#开启高效传输模式</span></span><br><span class="line">    <span class="comment">#tcp_nopush     on;    #减少网络报文段的数量</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;  <span class="comment">#保持连接的时间，也叫超时时间</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;  #开启gzip压缩</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>; <span class="comment">#包含的子配置项位置和文件</span></span><br></pre></td></tr></table></figure><h3 id="default-conf-配置项讲解"><a href="#default-conf-配置项讲解" class="headerlink" title="default.conf 配置项讲解"></a>default.conf 配置项讲解</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">80</span>;   <span class="comment">#配置监听端口</span></span><br><span class="line">    server_name  localhost;  <span class="regexp">//</span>配置域名</span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;     </span></span><br><span class="line">    <span class="comment">#access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   <span class="regexp">/usr/</span>share<span class="regexp">/nginx/</span>html;     <span class="comment">#服务默认启动目录</span></span><br><span class="line">        index  index.html index.htm;    <span class="comment">#默认访问文件</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#error_page  404              /404.html;   # 配置404页面</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    error_page   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /<span class="number">50</span>x.html;   <span class="comment">#错误状态码的显示页面，配置后需要重启</span></span><br><span class="line">    location = /<span class="number">50</span>x.html &#123;</span><br><span class="line">        root   <span class="regexp">/usr/</span>share<span class="regexp">/nginx/</span>html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">    <span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">    <span class="comment">#    root           html;</span></span><br><span class="line">    <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">    <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">    <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">    <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># deny access to .htaccess files, if Apache&#x27;s document root</span></span><br><span class="line">    <span class="comment"># concurs with nginx&#x27;s one</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">    <span class="comment">#    deny  all;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>网站目录在<code>/usr/share/nginx/html</code>下</p></blockquote><h1 id="DOCKER环境安装"><a href="#DOCKER环境安装" class="headerlink" title="DOCKER环境安装"></a>DOCKER环境安装</h1><h3 id="安装-docker-ce"><a href="#安装-docker-ce" class="headerlink" title="安装 docker-ce"></a>安装 docker-ce</h3><ul><li>卸载旧版本</li></ul><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker <span class="string">\</span></span><br><span class="line">                  docker-client <span class="string">\</span></span><br><span class="line">                  docker-client-latest <span class="string">\</span></span><br><span class="line">                  docker-common <span class="string">\</span></span><br><span class="line">                  docker-latest <span class="string">\</span></span><br><span class="line">                  docker-latest-logrotate <span class="string">\</span></span><br><span class="line">                  docker-logrotate <span class="string">\</span></span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><ul><li>安装<code>yum-utils</code>软件包（提供<code>yum-config-manager</code> 实用程序）并设置<strong>稳定的</strong>存储库。</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils</span><br><span class="line"></span><br><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https:<span class="regexp">//</span>download.docker.com<span class="regexp">/linux/</span>centos/docker-ce.repo</span><br></pre></td></tr></table></figure><ul><li><h4 id="安装DOCKER引擎"><a href="#安装DOCKER引擎" class="headerlink" title="安装DOCKER引擎"></a>安装DOCKER引擎</h4><ul><li><p>安装<em>最新版本</em>的Docker Engine和容器</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-<span class="keyword">ce</span> docker-<span class="keyword">ce</span>-cli containerd.io</span><br></pre></td></tr></table></figure></li></ul></li></ul><blockquote><p>如果提示您接受GPG密钥，请验证指纹是否匹配 <code>060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35</code>，如果是，则接受它。</p></blockquote><ul><li>启动Docker。</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="literal">start</span> docker</span><br></pre></td></tr></table></figure><ul><li>通过运行<code>hello-world</code> 映像来验证是否正确安装了Docker Engine</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker <span class="built_in">run</span> hello-world</span><br></pre></td></tr></table></figure><ul><li>设置开机启动</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker.service</span><br></pre></td></tr></table></figure><ul><li>配置DOCKER镜像下载加速</li></ul><blockquote><p>默认安装后的 Docker 环境在拉取 Docker 镜像时速度很慢,因此我们需要⼿动配置镜像加速源，提升获取 Docker 镜像的速度。</p></blockquote><ul><li>配置⽅法⾮常简单,直接编辑配置⽂件：</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>docker/daemon.json</span><br></pre></td></tr></table></figure><blockquote><p>在其中加⼊加速镜像源地址即可：</p></blockquote><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line"><span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>] </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>⽐如这⾥使⽤的是 ⽹易 的加速源，其他像 阿⾥云 、 DaoCloud 这些也都提供加速源，按需选择即可。<br>加完加速地址后，重新加载配置⽂件，重启 docker 服务即可：</p></blockquote><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">system</span>ctl daemon-reload</span><br><span class="line"><span class="params">system</span>ctl restart docker.service</span><br></pre></td></tr></table></figure><h3 id="安装Docker-Compose"><a href="#安装Docker-Compose" class="headerlink" title="安装Docker Compose"></a>安装Docker Compose</h3><h4 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h4><p>Docker Compose依靠Docker Engine进行任何有意义的工作，因此请确保根据您的设置在本地或远程安装Docker Engine。</p><ul><li>在Linux系统上安装</li></ul><blockquote><p>运行以下命令以下载Docker Compose的当前稳定版本：</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)&quot;</span> -o <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>docker-compose</span><br></pre></td></tr></table></figure><blockquote><p>将可执行权限应用于二进制文件：</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>docker-compose</span><br></pre></td></tr></table></figure><blockquote><p>测试安装。</p></blockquote><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose <span class="comment">--version</span></span><br><span class="line">docker-compose <span class="built_in">version</span> <span class="number">1.26</span><span class="number">.2</span>, build <span class="number">1110</span>ad01</span><br></pre></td></tr></table></figure><h1 id="安装PHP7-2"><a href="#安装PHP7-2" class="headerlink" title="安装PHP7.2"></a>安装PHP7.2</h1><h3 id="更新YUM源。"><a href="#更新YUM源。" class="headerlink" title="更新YUM源。"></a>更新YUM源。</h3><ul><li>运行以下命令添加epel源。</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install \</span><br><span class="line">https:<span class="regexp">//</span>repo.ius.io/ius-release-el7.rpm \</span><br><span class="line">https:<span class="regexp">//</span>dl.fedoraproject.org<span class="regexp">/pub/</span>epel/epel-release-latest-<span class="number">7</span>.noarch.rpm</span><br></pre></td></tr></table></figure><ul><li>运行以下命令添加Webtatic源。</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh https:<span class="regexp">//mi</span>rror.webtatic.com<span class="regexp">/yum/</span>el7/webtatic-release.rpm</span><br></pre></td></tr></table></figure><h3 id="运行以下命令安装PHP。"><a href="#运行以下命令安装PHP。" class="headerlink" title="运行以下命令安装PHP。"></a>运行以下命令安装PHP。</h3><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install php72w-devel php72w.x86_64 php72w-cli.x86_64 php72w-common.x86_64 php72w-gd.x86_64 php72w-ldap.x86_64 php72w-mbstring.x86_64 php72w-mcrypt.x86_64  php72w-pdo.x86_64   php72w-mysqlnd  php72w-fpm php72w-opcache php72w-pecl-redis php72w-pecl-mongodb</span><br></pre></td></tr></table></figure><h3 id="运行以下命令查看PHP版本。"><a href="#运行以下命令查看PHP版本。" class="headerlink" title="运行以下命令查看PHP版本。"></a>运行以下命令查看PHP版本。</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">php -v</span></span><br></pre></td></tr></table></figure><ul><li>返回结果如下所示，表示安装成功。</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[root@xd ~]</span># php -v</span><br><span class="line">PHP <span class="number">7.2</span><span class="selector-class">.31</span> (cli) (built: May <span class="number">31</span> <span class="number">2020</span> <span class="number">16</span>:<span class="number">18</span>:<span class="number">31</span>) ( NTS )</span><br><span class="line">Copyright (c) <span class="number">1997</span>-<span class="number">2018</span> The PHP Group</span><br><span class="line">Zend Engine v3<span class="selector-class">.2</span><span class="selector-class">.0</span>, Copyright (c) <span class="number">1998</span>-<span class="number">2018</span> Zend Technologies</span><br><span class="line">    with Zend OPcache v7<span class="selector-class">.2</span><span class="selector-class">.31</span>, Copyright (c) <span class="number">1999</span>-<span class="number">2018</span>, by Zend Technologies</span><br></pre></td></tr></table></figure><h3 id="执行以下命令，启动-PHP-FPM-服务。"><a href="#执行以下命令，启动-PHP-FPM-服务。" class="headerlink" title="执行以下命令，启动 PHP-FPM 服务。"></a>执行以下命令，启动 PHP-FPM 服务。</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="literal">start</span> php-fpm</span><br></pre></td></tr></table></figure><h3 id="执行以下命令，设置-PHP-FPM-服务为开机自启动。"><a href="#执行以下命令，设置-PHP-FPM-服务为开机自启动。" class="headerlink" title="执行以下命令，设置 PHP-FPM 服务为开机自启动。"></a>执行以下命令，设置 PHP-FPM 服务为开机自启动。</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> php-fpm</span><br></pre></td></tr></table></figure><h3 id="验证环境配置"><a href="#验证环境配置" class="headerlink" title="验证环境配置"></a>验证环境配置</h3><blockquote><p>当您完成环境配置后，可以通过以下验证 LNMP 环境是否搭建成功。</p></blockquote><ul><li>执行以下命令，创建测试文件。</li></ul><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">echo &quot;</span><span class="language-php"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">phpinfo</span>(); <span class="meta">?&gt;</span></span><span class="language-xml">&quot; &gt;&gt; /usr/share/nginx/html/index.php</span></span><br></pre></td></tr></table></figure><ul><li>执行以下命令，修改 <code>default.conf</code> 文件。</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv <span class="regexp">/etc/</span>nginx<span class="regexp">/conf.d/</span><span class="keyword">default</span>.conf <span class="regexp">/etc/</span>nginx<span class="regexp">/conf.d/</span><span class="keyword">default</span>.conf.bak</span><br><span class="line">vi <span class="regexp">/etc/</span>nginx<span class="regexp">/conf.d/</span><span class="keyword">default</span>.conf</span><br></pre></td></tr></table></figure><ul><li>按 “<strong>i</strong>” 切换至编辑模式，编辑 <code>default.conf</code> 文件。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"> <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line"> <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line"> <span class="attribute">server_name</span>  localhost;</span><br><span class="line"> <span class="comment">#charset koi8-r;</span></span><br><span class="line"> <span class="comment">#access_log  /var/log/nginx/log/host.access.log  main;</span></span><br><span class="line"> <span class="comment">#</span></span><br><span class="line"> <span class="section">location</span> / &#123;</span><br><span class="line">       <span class="attribute">index</span> index.php index.html index.htm;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"> <span class="comment">#redirect server error pages to the static page /50x.html</span></span><br><span class="line"> <span class="comment">#</span></span><br><span class="line"> <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line"> <span class="section">location</span> = /50x.html &#123;</span><br><span class="line">   <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">#pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line"> <span class="comment">#</span></span><br><span class="line"> <span class="section">location</span> <span class="regexp">~ .php$</span> &#123;</span><br><span class="line">   <span class="attribute">fastcgi_pass</span>   <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">   <span class="attribute">fastcgi_index</span>  index.php;</span><br><span class="line">   <span class="attribute">fastcgi_param</span>  SCRIPT_FILENAME  <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">   <span class="attribute">include</span>        fastcgi_params;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重新加载Nginx</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nginx -s reload</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>